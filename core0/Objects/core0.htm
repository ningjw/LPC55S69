<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\core0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\core0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Sat Jan  2 23:20:57 2021
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4]">Reset_Handler</a>
 <LI><a href="#[66]">ACMP_DriverIRQHandler</a>
 <LI><a href="#[64]">ADC0_DriverIRQHandler</a>
 <LI><a href="#[8]">BusFault_Handler</a>
 <LI><a href="#[85]">CASER_DriverIRQHandler</a>
 <LI><a href="#[c]">DebugMon_Handler</a>
 <LI><a href="#[3]">DefaultISR</a>
 <LI><a href="#[84]">HASHCRYPT_DriverIRQHandler</a>
 <LI><a href="#[6d]">MAILBOX_DriverIRQHandler</a>
 <LI><a href="#[57]">MRT0_DriverIRQHandler</a>
 <LI><a href="#[7]">MemManage_Handler</a>
 <LI><a href="#[74]">OS_EVENT_DriverIRQHandler</a>
 <LI><a href="#[82]">PLU_DriverIRQHandler</a>
 <LI><a href="#[87]">PQ_DriverIRQHandler</a>
 <LI><a href="#[86]">PUF_DriverIRQHandler</a>
 <LI><a href="#[6b]">RTC_DriverIRQHandler</a>
 <LI><a href="#[65]">Reserved39_DriverIRQHandler</a>
 <LI><a href="#[67]">Reserved41_DriverIRQHandler</a>
 <LI><a href="#[68]">Reserved42_DriverIRQHandler</a>
 <LI><a href="#[6c]">Reserved46_DriverIRQHandler</a>
 <LI><a href="#[75]">Reserved55_DriverIRQHandler</a>
 <LI><a href="#[76]">Reserved56_DriverIRQHandler</a>
 <LI><a href="#[77]">Reserved57_DriverIRQHandler</a>
 <LI><a href="#[79]">Reserved59_DriverIRQHandler</a>
 <LI><a href="#[7a]">Reserved60_DriverIRQHandler</a>
 <LI><a href="#[7b]">Reserved61_DriverIRQHandler</a>
 <LI><a href="#[5a]">SCT0_DriverIRQHandler</a>
 <LI><a href="#[78]">SDIO_DriverIRQHandler</a>
 <LI><a href="#[7f]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a>
 <LI><a href="#[83]">SEC_VIO_DriverIRQHandler</a>
 <LI><a href="#[a]">SecureFault_Handler</a>
 <LI><a href="#[6a]">USB0_DriverIRQHandler</a>
 <LI><a href="#[69]">USB0_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[7d]">USB1_DriverIRQHandler</a>
 <LI><a href="#[7e]">USB1_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[7c]">USB1_PHY_DriverIRQHandler</a>
 <LI><a href="#[9]">UsageFault_Handler</a>
 <LI><a href="#[4e]">WDT_BOD_DriverIRQHandler</a>
 <LI><a href="#[5]">NMI_Handler</a>
 <LI><a href="#[6]">HardFault_Handler</a>
 <LI><a href="#[f]">WDT_BOD_IRQHandler</a>
 <LI><a href="#[10]">DMA0_IRQHandler</a>
 <LI><a href="#[11]">GINT0_IRQHandler</a>
 <LI><a href="#[12]">GINT1_IRQHandler</a>
 <LI><a href="#[13]">PIN_INT0_IRQHandler</a>
 <LI><a href="#[14]">PIN_INT1_IRQHandler</a>
 <LI><a href="#[15]">PIN_INT2_IRQHandler</a>
 <LI><a href="#[16]">PIN_INT3_IRQHandler</a>
 <LI><a href="#[17]">UTICK0_IRQHandler</a>
 <LI><a href="#[18]">MRT0_IRQHandler</a>
 <LI><a href="#[19]">CTIMER0_IRQHandler</a>
 <LI><a href="#[1a]">CTIMER1_IRQHandler</a>
 <LI><a href="#[1b]">SCT0_IRQHandler</a>
 <LI><a href="#[1c]">CTIMER3_IRQHandler</a>
 <LI><a href="#[1d]">FLEXCOMM0_IRQHandler</a>
 <LI><a href="#[1e]">FLEXCOMM1_IRQHandler</a>
 <LI><a href="#[21]">FLEXCOMM4_IRQHandler</a>
 <LI><a href="#[22]">FLEXCOMM5_IRQHandler</a>
 <LI><a href="#[23]">FLEXCOMM6_IRQHandler</a>
 <LI><a href="#[24]">FLEXCOMM7_IRQHandler</a>
 <LI><a href="#[25]">ADC0_IRQHandler</a>
 <LI><a href="#[26]">Reserved39_IRQHandler</a>
 <LI><a href="#[27]">ACMP_IRQHandler</a>
 <LI><a href="#[28]">Reserved41_IRQHandler</a>
 <LI><a href="#[29]">Reserved42_IRQHandler</a>
 <LI><a href="#[2a]">USB0_NEEDCLK_IRQHandler</a>
 <LI><a href="#[2b]">USB0_IRQHandler</a>
 <LI><a href="#[2c]">RTC_IRQHandler</a>
 <LI><a href="#[2d]">Reserved46_IRQHandler</a>
 <LI><a href="#[2f]">PIN_INT4_IRQHandler</a>
 <LI><a href="#[30]">PIN_INT5_IRQHandler</a>
 <LI><a href="#[31]">PIN_INT6_IRQHandler</a>
 <LI><a href="#[32]">PIN_INT7_IRQHandler</a>
 <LI><a href="#[33]">CTIMER2_IRQHandler</a>
 <LI><a href="#[34]">CTIMER4_IRQHandler</a>
 <LI><a href="#[35]">OS_EVENT_IRQHandler</a>
 <LI><a href="#[36]">Reserved55_IRQHandler</a>
 <LI><a href="#[37]">Reserved56_IRQHandler</a>
 <LI><a href="#[38]">Reserved57_IRQHandler</a>
 <LI><a href="#[39]">SDIO_IRQHandler</a>
 <LI><a href="#[3a]">Reserved59_IRQHandler</a>
 <LI><a href="#[3b]">Reserved60_IRQHandler</a>
 <LI><a href="#[3c]">Reserved61_IRQHandler</a>
 <LI><a href="#[3d]">USB1_PHY_IRQHandler</a>
 <LI><a href="#[3f]">USB1_NEEDCLK_IRQHandler</a>
 <LI><a href="#[40]">SEC_HYPERVISOR_CALL_IRQHandler</a>
 <LI><a href="#[41]">SEC_GPIO_INT0_IRQ0_IRQHandler</a>
 <LI><a href="#[42]">SEC_GPIO_INT0_IRQ1_IRQHandler</a>
 <LI><a href="#[43]">PLU_IRQHandler</a>
 <LI><a href="#[44]">SEC_VIO_IRQHandler</a>
 <LI><a href="#[45]">HASHCRYPT_IRQHandler</a>
 <LI><a href="#[46]">CASER_IRQHandler</a>
 <LI><a href="#[47]">PUF_IRQHandler</a>
 <LI><a href="#[48]">PQ_IRQHandler</a>
 <LI><a href="#[49]">DMA1_IRQHandler</a>
 <LI><a href="#[4a]">FLEXCOMM8_IRQHandler</a>
 <LI><a href="#[ca]">POWER_SetVoltageForFreq</a>
 <LI><a href="#[129]">lowpower_set_dcdc_power_profile</a>
 <LI><a href="#[191]">lowpower_set_system_voltage</a>
 <LI><a href="#[12a]">lowpower_set_voltage_for_process</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[18e]">abort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18e]">abort</a><BR>
 <LI><a href="#[17e]">USB_DeviceLpc3511IpSetDefaultState</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4]">USB_DeviceLpc3511IpControl</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[66]">ACMP_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[27]">ACMP_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[64]">ADC0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[25]">ADC0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[95]">APPTask</a> from composite.o(.text.APPTask) referenced 2 times from composite.o(.text.main)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[85]">CASER_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[46]">CASER_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[58]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[19]">CTIMER0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[59]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1a]">CTIMER1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[72]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[33]">CTIMER2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5b]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1c]">CTIMER3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[73]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[34]">CTIMER4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4f]">DMA0_DriverIRQHandler</a> from fsl_dma.o(.text.DMA0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[10]">DMA0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[88]">DMA1_DriverIRQHandler</a> from fsl_dma.o(.text.DMA1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[49]">DMA1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[3]">DefaultISR</a> from startup_lpc55s69_cm33_core0.o(.text) referenced 2 times from fsl_utick.o(.data.s_utickIsr)
 <LI><a href="#[5c]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1d]">FLEXCOMM0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5d]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1e]">FLEXCOMM1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5e]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1f]">FLEXCOMM2_IRQHandler</a> from nbiot_app.o(.text.FLEXCOMM2_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5f]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[20]">FLEXCOMM3_IRQHandler</a> from ble_app.o(.text.FLEXCOMM3_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[60]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[21]">FLEXCOMM4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[61]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[22]">FLEXCOMM5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[62]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[23]">FLEXCOMM6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[63]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[24]">FLEXCOMM7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[89]">FLEXCOMM8_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[4a]">FLEXCOMM8_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[50]">GINT0_DriverIRQHandler</a> from fsl_gint.o(.text.GINT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[11]">GINT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[51]">GINT1_DriverIRQHandler</a> from fsl_gint.o(.text.GINT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[12]">GINT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[84]">HASHCRYPT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[45]">HASHCRYPT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[8c]">I2S_DMACallback</a> from fsl_i2s_dma.o(.text.I2S_DMACallback) referenced 2 times from fsl_i2s_dma.o(.text.I2S_TxTransferCreateHandleDMA)
 <LI><a href="#[6d]">MAILBOX_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2e]">MAILBOX_IRQHandler</a> from core1_app.o(.text.MAILBOX_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[57]">MRT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[18]">MRT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[74]">OS_EVENT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[35]">OS_EVENT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[52]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[13]">PIN_INT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[53]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[14]">PIN_INT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[54]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[15]">PIN_INT2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[55]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[16]">PIN_INT3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6e]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2f]">PIN_INT4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6f]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[30]">PIN_INT5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[70]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[31]">PIN_INT6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[71]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[32]">PIN_INT7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[82]">PLU_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[43]">PLU_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[87]">PQ_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[48]">PQ_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[86]">PUF_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[47]">PUF_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[d]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[d]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[6b]">RTC_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2c]">RTC_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[65]">Reserved39_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[26]">Reserved39_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[67]">Reserved41_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[28]">Reserved41_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[68]">Reserved42_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[29]">Reserved42_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6c]">Reserved46_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2d]">Reserved46_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[75]">Reserved55_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[36]">Reserved55_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[76]">Reserved56_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[37]">Reserved56_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[77]">Reserved57_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[38]">Reserved57_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[79]">Reserved59_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3a]">Reserved59_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7a]">Reserved60_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3b]">Reserved60_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7b]">Reserved61_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3c]">Reserved61_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8b]">RxCallback</a> from composite.o(.text.RxCallback) referenced 2 times from composite.o(.text.BOARD_DMA_EDMA_Start)
 <LI><a href="#[5a]">SCT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1b]">SCT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[78]">SDIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[39]">SDIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[80]">SEC_GPIO_INT0_IRQ0_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[41]">SEC_GPIO_INT0_IRQ0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[81]">SEC_GPIO_INT0_IRQ1_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[42]">SEC_GPIO_INT0_IRQ1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7f]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[40]">SEC_HYPERVISOR_CALL_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[83]">SEC_VIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[44]">SEC_VIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[b]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[b]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[a]">SecureFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[e]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[e]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[4c]">SystemInit</a> from system_lpc55s69_cm33_core0.o(.text.SystemInit) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[8a]">TxCallback</a> from composite.o(.text.TxCallback) referenced 2 times from composite.o(.text.BOARD_DMA_EDMA_Start)
 <LI><a href="#[6a]">USB0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2b]">USB0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[69]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2a]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7d]">USB1_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3e]">USB1_IRQHandler</a> from composite.o(.text.USB1_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7e]">USB1_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3f]">USB1_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7c]">USB1_PHY_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3d]">USB1_PHY_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">USB_DeviceAudioCompositeCallback</a> from audio_unified.o(.text.USB_DeviceAudioCompositeCallback) referenced 4 times from composite.o(.data.g_CompositeClassConfig)
 <LI><a href="#[9d]">USB_DeviceAudioDeinit</a> from usb_device_audio.o(.text.USB_DeviceAudioDeinit) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[9e]">USB_DeviceAudioEvent</a> from usb_device_audio.o(.text.USB_DeviceAudioEvent) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[9c]">USB_DeviceAudioInit</a> from usb_device_audio.o(.text.USB_DeviceAudioInit) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[8e]">USB_DeviceAudioInterruptIn</a> from usb_device_audio.o(.text.USB_DeviceAudioInterruptIn) referenced 2 times from usb_device_audio.o(.text.USB_DeviceAudioControlEndpointsInit)
 <LI><a href="#[8f]">USB_DeviceAudioIsochronousIn</a> from usb_device_audio.o(.text.USB_DeviceAudioIsochronousIn) referenced 2 times from usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsInit)
 <LI><a href="#[90]">USB_DeviceAudioIsochronousOut</a> from usb_device_audio.o(.text.USB_DeviceAudioIsochronousOut) referenced 2 times from usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsInit)
 <LI><a href="#[2]">USB_DeviceCallback</a> from composite.o(.text.USB_DeviceCallback) referenced 2 times from composite.o(.data.g_UsbDeviceCompositeConfigList)
 <LI><a href="#[a9]">USB_DeviceCh9GetConfiguration</a> from usb_device_ch9.o(.text.USB_DeviceCh9GetConfiguration) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[a8]">USB_DeviceCh9GetDescriptor</a> from usb_device_ch9.o(.text.USB_DeviceCh9GetDescriptor) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[ab]">USB_DeviceCh9GetInterface</a> from usb_device_ch9.o(.text.USB_DeviceCh9GetInterface) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[a5]">USB_DeviceCh9GetStatus</a> from usb_device_ch9.o(.text.USB_DeviceCh9GetStatus) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[a7]">USB_DeviceCh9SetAddress</a> from usb_device_ch9.o(.text.USB_DeviceCh9SetAddress) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[a6]">USB_DeviceCh9SetClearFeature</a> from usb_device_ch9.o(.text.USB_DeviceCh9SetClearFeature) referenced 2 times from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[aa]">USB_DeviceCh9SetConfiguration</a> from usb_device_ch9.o(.text.USB_DeviceCh9SetConfiguration) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[ac]">USB_DeviceCh9SetInterface</a> from usb_device_ch9.o(.text.USB_DeviceCh9SetInterface) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[ad]">USB_DeviceCh9SynchFrame</a> from usb_device_ch9.o(.text.USB_DeviceCh9SynchFrame) referenced from usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
 <LI><a href="#[91]">USB_DeviceClassCallback</a> from usb_device_class.o(.text.USB_DeviceClassCallback) referenced 2 times from usb_device_class.o(.text.USB_DeviceClassInit)
 <LI><a href="#[92]">USB_DeviceControlCallback</a> from usb_device_ch9.o(.text.USB_DeviceControlCallback) referenced 2 times from usb_device_ch9.o(.text.USB_DeviceControlPipeInit)
 <LI><a href="#[9a]">USB_DeviceHidDeinit</a> from usb_device_hid.o(.text.USB_DeviceHidDeinit) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[9b]">USB_DeviceHidEvent</a> from usb_device_hid.o(.text.USB_DeviceHidEvent) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[99]">USB_DeviceHidInit</a> from usb_device_hid.o(.text.USB_DeviceHidInit) referenced from usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
 <LI><a href="#[94]">USB_DeviceHidInterruptIn</a> from usb_device_hid.o(.text.USB_DeviceHidInterruptIn) referenced 2 times from usb_device_hid.o(.text.USB_DeviceHidEndpointsInit)
 <LI><a href="#[93]">USB_DeviceHidInterruptOut</a> from usb_device_hid.o(.text.USB_DeviceHidInterruptOut) referenced 2 times from usb_device_hid.o(.text.USB_DeviceHidEndpointsInit)
 <LI><a href="#[0]">USB_DeviceHidKeyboardCallback</a> from hid_keyboard.o(.text.USB_DeviceHidKeyboardCallback) referenced 2 times from composite.o(.data.g_CompositeClassConfig)
 <LI><a href="#[a3]">USB_DeviceLpc3511IpCancel</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpCancel) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[a4]">USB_DeviceLpc3511IpControl</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpControl) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[a0]">USB_DeviceLpc3511IpDeinit</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpDeinit) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[9f]">USB_DeviceLpc3511IpInit</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpInit) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[a2]">USB_DeviceLpc3511IpRecv</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpRecv) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[a1]">USB_DeviceLpc3511IpSend</a> from usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpSend) referenced from usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
 <LI><a href="#[56]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(.text.UTICK0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[17]">UTICK0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4e]">WDT_BOD_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[f]">WDT_BOD_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[4b]">main</a> from composite.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[97]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[96]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[98]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[8d]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text.SVC_Handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1cc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[af]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1cd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1ce]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1cf]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>ACMP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[85]"></a>CASER_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(.data.s_utickIsr)
</UL>
<P><STRONG><a name="[84]"></a>HASHCRYPT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[57]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[74]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>PLU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>PQ_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>PUF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>Reserved39_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>Reserved42_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Reserved55_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>Reserved56_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>Reserved57_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>Reserved59_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>Reserved60_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>Reserved61_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>SDIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>SEC_HYPERVISOR_CALL_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>SEC_VIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[a]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6a]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>USB1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>USB1_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>USB1_PHY_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4e]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1c]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>Reserved55_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>Reserved57_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>USB1_PHY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>USB1_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SEC_HYPERVISOR_CALL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>SEC_GPIO_INT0_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>SEC_GPIO_INT0_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>PLU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>SEC_VIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>HASHCRYPT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>CASER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[47]"></a>PUF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>PQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[49]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[1d2]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetActualBufferAndPrime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpDoPreviousTransactionMemcpy
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1da]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>APPInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, composite.o(.text.APPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = APPInit &rArr; Init_Board_Audio &rArr; BOARD_DMA_EDMA_Start &rArr; I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRun
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceIsrEnable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Audio
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[95]"></a>APPTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, composite.o(.text.APPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = APPTask &rArr; APPInit &rArr; Init_Board_Audio &rArr; BOARD_DMA_EDMA_Start &rArr; I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_DisableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.text.main)
</UL>
<P><STRONG><a name="[c5]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 562 bytes, Stack size 64 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>BOARD_DMA_EDMA_Config</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, composite.o(.text.BOARD_DMA_EDMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BOARD_DMA_EDMA_Config &rArr; DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetChannelPriority
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Audio
</UL>

<P><STRONG><a name="[d3]"></a>BOARD_DMA_EDMA_Start</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, composite.o(.text.BOARD_DMA_EDMA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BOARD_DMA_EDMA_Start &rArr; I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferCreateHandleDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Audio
</UL>

<P><STRONG><a name="[d8]"></a>BOARD_InitPins</STRONG> (Thumb, 1770 bytes, Stack size 88 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BOARD_InitPins
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GetVersion
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>BOARD_USB_Audio_TxRxInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, composite.o(.text.BOARD_USB_Audio_TxRxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BOARD_USB_Audio_TxRxInit &rArr; I2S_USB_Audio_TxInit &rArr; I2S_TxInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_TxInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_RxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Board_Audio
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_AttachClk</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>CLOCK_EnableUsbhs0DeviceClock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_EnableUsbhs0DeviceClock))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
</UL>

<P><STRONG><a name="[e0]"></a>CLOCK_EnableUsbhs0PhyPllClock</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_EnableUsbhs0PhyPllClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_EnableUsbhs0PhyPllClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
</UL>

<P><STRONG><a name="[e3]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetExtClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
</UL>

<P><STRONG><a name="[e4]"></a>CLOCK_GetFro1MFreq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro1MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
</UL>

<P><STRONG><a name="[e5]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetOsc32KFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
</UL>

<P><STRONG><a name="[e2]"></a>CLOCK_GetPLL0InClockRate</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPLL0InClockRate))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[11e]"></a>CLOCK_GetPll0OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll0OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_TxInit
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 258 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_SetPLL0Freq</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetPLL0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPll0PreDiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPLL0Locked
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>CLOCK_SetupExtClocking</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetupExtClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetupExtClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetupFROClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[58]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, fsl_ctimer.o(.text.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER_GenericIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetStatusFlags
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA0_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA1_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>DMA_AbortTransfer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_AbortTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_AbortTransfer &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
</UL>

<P><STRONG><a name="[d2]"></a>DMA_CreateHandle</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fsl_dma.o(.text.DMA_CreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Config
</UL>

<P><STRONG><a name="[ed]"></a>DMA_IRQHandle</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, fsl_dma.o(.text.DMA_IRQHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Config
</UL>

<P><STRONG><a name="[fb]"></a>DMA_SetCallback</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_SetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_SetCallback &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
</UL>

<P><STRONG><a name="[fc]"></a>DMA_SetupDescriptor</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, fsl_dma.o(.text.DMA_SetupDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitChannelTransferParameter
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>

<P><STRONG><a name="[fd]"></a>DMA_StartTransfer</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_dma.o(.text.DMA_StartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DMA_StartTransfer &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[fe]"></a>DMA_SubmitChannelTransferParameter</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, fsl_dma.o(.text.DMA_SubmitChannelTransferParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA_SubmitChannelTransferParameter &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetupDescriptor
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[5c]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nbiot_app.o(.text.FLEXCOMM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLEXCOMM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[5f]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, ble_app.o(.text.FLEXCOMM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCOMM3_IRQHandler &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[107]"></a>FLEXCOMM3_TimeTick</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ble_app.o(.text.FLEXCOMM3_TimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLEXCOMM3_TimeTick &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[60]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM8_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[109]"></a>FLEXCOMM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxInit
</UL>

<P><STRONG><a name="[50]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fsl_gint.o(.text.GINT1_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>GPIO_PinInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[8c]"></a>I2S_DMACallback</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fsl_i2s_dma.o(.text.I2S_DMACallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2S_DMACallback &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_i2s_dma.o(.text.I2S_TxTransferCreateHandleDMA)
</UL>
<P><STRONG><a name="[11c]"></a>I2S_RxGetDefaultConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_i2s.o(.text.I2S_RxGetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_RxInit
</UL>

<P><STRONG><a name="[115]"></a>I2S_RxInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_i2s.o(.text.I2S_RxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2S_RxInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_RxInit
</UL>

<P><STRONG><a name="[d5]"></a>I2S_RxTransferCreateHandleDMA</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_RxTransferCreateHandleDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2S_RxTransferCreateHandleDMA &rArr; I2S_TxTransferCreateHandleDMA &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Start
</UL>

<P><STRONG><a name="[d6]"></a>I2S_RxTransferReceiveDMA</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_i2s_dma.o(.text.I2S_RxTransferReceiveDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2S_RxTransferReceiveDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnqueueUserBuffer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableDMAInterrupts
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DisableDMAInterrupts
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Start
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxCallback
</UL>

<P><STRONG><a name="[111]"></a>I2S_TransferAbortDMA</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, fsl_i2s_dma.o(.text.I2S_TransferAbortDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2S_TransferAbortDMA &rArr; DMA_AbortTransfer &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxEnableDMA
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxEnableDMA
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DisableDMAInterrupts
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Disable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMACallback
</UL>

<P><STRONG><a name="[11d]"></a>I2S_TxGetDefaultConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fsl_i2s.o(.text.I2S_TxGetDefaultConfig))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_TxInit
</UL>

<P><STRONG><a name="[11b]"></a>I2S_TxInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fsl_i2s.o(.text.I2S_TxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2S_TxInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_USB_Audio_TxInit
</UL>

<P><STRONG><a name="[d4]"></a>I2S_TxTransferCreateHandleDMA</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, fsl_i2s_dma.o(.text.I2S_TxTransferCreateHandleDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2S_TxTransferCreateHandleDMA &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferCreateHandleDMA
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Start
</UL>

<P><STRONG><a name="[d7]"></a>I2S_TxTransferSendDMA</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fsl_i2s_dma.o(.text.I2S_TxTransferSendDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnqueueUserBuffer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableDMAInterrupts
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DisableDMAInterrupts
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Start
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxCallback
</UL>

<P><STRONG><a name="[df]"></a>I2S_USB_Audio_RxInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, composite.o(.text.I2S_USB_Audio_RxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2S_USB_Audio_RxInit &rArr; I2S_RxInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxGetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USB_Audio_TxRxInit
</UL>

<P><STRONG><a name="[de]"></a>I2S_USB_Audio_TxInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, composite.o(.text.I2S_USB_Audio_TxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2S_USB_Audio_TxInit &rArr; I2S_TxInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxGetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USB_Audio_TxRxInit
</UL>

<P><STRONG><a name="[db]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[bd]"></a>Init_Board_Audio</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, composite.o(.text.Init_Board_Audio))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Init_Board_Audio &rArr; BOARD_DMA_EDMA_Start &rArr; I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_USB_Audio_TxRxInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Start
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[2e]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, core1_app.o(.text.MAILBOX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MAILBOX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_GetValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_ClearValueBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[121]"></a>OSA_EnterCritical</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fsl_os_abstraction_free_rtos.o(.text.OSA_EnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByDeviceHandle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByControllerId
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassFreeHandle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassAllocateHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioFreeHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioAllocateHandle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetDeviceHandle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511ReleaseMaxPacketBuffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511MallocMaxPacketBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointPrime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>

<P><STRONG><a name="[124]"></a>OSA_ExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_os_abstraction_free_rtos.o(.text.OSA_ExitCritical))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByDeviceHandle
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByControllerId
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassFreeHandle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassAllocateHandle
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioFreeHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioAllocateHandle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetDeviceHandle
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511ReleaseMaxPacketBuffer
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511MallocMaxPacketBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointPrime
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>

<P><STRONG><a name="[127]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[128]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_pint.o(.text.PINT_PinInterruptClrStatus))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[52]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT2_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT3_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT4_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT5_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT6_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT7_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetVoltageForFreq))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_dcdc_power_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text.PendSV_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12b]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[fa]"></a>RESET_PeripheralReset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[e9]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, fsl_common.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[80]"></a>SEC_GPIO_INT0_IRQ0_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEC_GPIO_INT0_IRQ0_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>SEC_GPIO_INT0_IRQ1_DriverIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEC_GPIO_INT0_IRQ1_DriverIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_TimeTick
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInitHook), UNUSED)

<P><STRONG><a name="[3e]"></a>USB1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, composite.o(.text.USB1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB1_IRQHandler &rArr; USB_DeviceLpcIp3511IsrFunction &rArr; USB_DeviceLpc3511IpInterruptToken &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511IsrFunction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[130]"></a>USB_AudioFeedbackDataUpdate</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, audio_unified.o(.text.USB_AudioFeedbackDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_AudioFeedbackDataUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioSpeakerBufferSpaceUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[137]"></a>USB_AudioRecorderBufferSpaceUsed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_AudioRecorderBufferSpaceUsed))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[139]"></a>USB_AudioRecorderGetBuffer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, audio_unified.o(.text.USB_AudioRecorderGetBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_AudioRecorderGetBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[131]"></a>USB_AudioSpeakerBufferSpaceUsed</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_AudioSpeakerBufferSpaceUsed))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioFeedbackDataUpdate
</UL>

<P><STRONG><a name="[135]"></a>USB_AudioSpeakerPutBuffer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, audio_unified.o(.text.USB_AudioSpeakerPutBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_AudioSpeakerPutBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[1]"></a>USB_DeviceAudioCompositeCallback</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, audio_unified.o(.text.USB_DeviceAudioCompositeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceAudioCompositeCallback &rArr; USB_DeviceAudioSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_RecorderDataMatch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSend
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRequest
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioSpeakerPutBuffer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioRecorderGetBuffer
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioRecorderBufferSpaceUsed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_AudioFeedbackDataUpdate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.data.g_CompositeClassConfig)
</UL>
<P><STRONG><a name="[bb]"></a>USB_DeviceAudioCompositeInit</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_DeviceAudioCompositeInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[15f]"></a>USB_DeviceAudioCompositeSetConfigure</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_DeviceAudioCompositeSetConfigure))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[13b]"></a>USB_DeviceAudioControlEndpointsDeinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_device_audio.o(.text.USB_DeviceAudioControlEndpointsDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceAudioControlEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioDeinit
</UL>

<P><STRONG><a name="[13d]"></a>USB_DeviceAudioControlEndpointsInit</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, usb_device_audio.o(.text.USB_DeviceAudioControlEndpointsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceAudioControlEndpointsInit &rArr; USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[9d]"></a>USB_DeviceAudioDeinit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_device_audio.o(.text.USB_DeviceAudioDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceAudioDeinit &rArr; USB_DeviceAudioStreamEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsDeinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioControlEndpointsDeinit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioFreeHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[9e]"></a>USB_DeviceAudioEvent</STRONG> (Thumb, 578 bytes, Stack size 24 bytes, usb_device_audio.o(.text.USB_DeviceAudioEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USB_DeviceAudioEvent &rArr; USB_DeviceAudioStreamEndpointsInit &rArr; USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsDeinit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetRequestInterface
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetRequestEndpoint
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetRequestInterface
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetRequestEndpoint
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioControlEndpointsInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioControlEndpointsDeinit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[149]"></a>USB_DeviceAudioGetCurAudioFeatureUnit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetCurAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetFeatureUnit
</UL>

<P><STRONG><a name="[148]"></a>USB_DeviceAudioGetFeatureUnit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetFeatureUnit))
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetResAudioFeatureUnit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetMinAudioFeatureUnit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetMaxAudioFeatureUnit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetCurAudioFeatureUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetRequestInterface
</UL>

<P><STRONG><a name="[14a]"></a>USB_DeviceAudioGetMaxAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetMaxAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetFeatureUnit
</UL>

<P><STRONG><a name="[14c]"></a>USB_DeviceAudioGetMinAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetMinAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetFeatureUnit
</UL>

<P><STRONG><a name="[147]"></a>USB_DeviceAudioGetRequestEndpoint</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetRequestEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[146]"></a>USB_DeviceAudioGetRequestInterface</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetRequestInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceAudioGetRequestInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetFeatureUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[14b]"></a>USB_DeviceAudioGetResAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioGetResAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioGetFeatureUnit
</UL>

<P><STRONG><a name="[9c]"></a>USB_DeviceAudioInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_device_audio.o(.text.USB_DeviceAudioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceAudioInit &rArr; USB_DeviceClassGetDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioAllocateHandle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetDeviceHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[8e]"></a>USB_DeviceAudioInterruptIn</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioInterruptIn))
<BR>[Address Reference Count : 1]<UL><LI> usb_device_audio.o(.text.USB_DeviceAudioControlEndpointsInit)
</UL>
<P><STRONG><a name="[8f]"></a>USB_DeviceAudioIsochronousIn</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioIsochronousIn))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsInit)
</UL>
<P><STRONG><a name="[90]"></a>USB_DeviceAudioIsochronousOut</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioIsochronousOut))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsInit)
</UL>
<P><STRONG><a name="[14e]"></a>USB_DeviceAudioRecorderSetInterface</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, audio_unified.o(.text.USB_DeviceAudioRecorderSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceAudioRecorderSetInterface &rArr; USB_DeviceAudioSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSend
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecorderStatusReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[14f]"></a>USB_DeviceAudioRecorderStatusReset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_DeviceAudioRecorderStatusReset))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecorderSetInterface
</UL>

<P><STRONG><a name="[136]"></a>USB_DeviceAudioRecv</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_device_audio.o(.text.USB_DeviceAudioRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceAudioRecv &rArr; USB_DeviceRecvRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSpeakerSetInterface
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[134]"></a>USB_DeviceAudioRequest</STRONG> (Thumb, 1306 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_DeviceAudioRequest))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[13a]"></a>USB_DeviceAudioSend</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_device_audio.o(.text.USB_DeviceAudioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceAudioSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSpeakerSetInterface
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecorderSetInterface
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[153]"></a>USB_DeviceAudioSetCurAudioFeatureUnit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetCurAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetFeatureUnit
</UL>

<P><STRONG><a name="[152]"></a>USB_DeviceAudioSetFeatureUnit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetFeatureUnit))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetResAudioFeatureUnit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetMinAudioFeatureUnit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetMaxAudioFeatureUnit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetCurAudioFeatureUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetRequestInterface
</UL>

<P><STRONG><a name="[154]"></a>USB_DeviceAudioSetMaxAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetMaxAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetFeatureUnit
</UL>

<P><STRONG><a name="[156]"></a>USB_DeviceAudioSetMinAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetMinAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetFeatureUnit
</UL>

<P><STRONG><a name="[144]"></a>USB_DeviceAudioSetRequestEndpoint</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetRequestEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[141]"></a>USB_DeviceAudioSetRequestInterface</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetRequestInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceAudioSetRequestInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetFeatureUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[155]"></a>USB_DeviceAudioSetResAudioFeatureUnit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_audio.o(.text.USB_DeviceAudioSetResAudioFeatureUnit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSetFeatureUnit
</UL>

<P><STRONG><a name="[157]"></a>USB_DeviceAudioSpeakerSetInterface</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, audio_unified.o(.text.USB_DeviceAudioSpeakerSetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceAudioSpeakerSetInterface &rArr; USB_DeviceAudioSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSpeakerStatusReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSend
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[158]"></a>USB_DeviceAudioSpeakerStatusReset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_DeviceAudioSpeakerStatusReset))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSpeakerSetInterface
</UL>

<P><STRONG><a name="[13f]"></a>USB_DeviceAudioStreamEndpointsDeinit</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceAudioStreamEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioIsochronousOut
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioIsochronousIn
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioDeinit
</UL>

<P><STRONG><a name="[145]"></a>USB_DeviceAudioStreamEndpointsInit</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, usb_device_audio.o(.text.USB_DeviceAudioStreamEndpointsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceAudioStreamEndpointsInit &rArr; USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
</UL>

<P><STRONG><a name="[2]"></a>USB_DeviceCallback</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, composite.o(.text.USB_DeviceCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceCallback &rArr; USB_DeviceAudioSpeakerSetInterface &rArr; USB_DeviceAudioSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetSpeed
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStringDescriptor
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetHidReportDescriptor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetDeviceDescriptor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetConfigurationDescriptor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSpeakerSetInterface
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecorderSetInterface
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeSetConfigure
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardSetConfigure
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.data.g_UsbDeviceCompositeConfigList)
</UL>
<P><STRONG><a name="[91]"></a>USB_DeviceClassCallback</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_device_class.o(.text.USB_DeviceClassCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByDeviceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetInterface
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetInterface
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetDescriptor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.text.USB_DeviceClassInit)
</UL>
<P><STRONG><a name="[163]"></a>USB_DeviceClassEvent</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, usb_device_class.o(.text.USB_DeviceClassEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByDeviceHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetInterface
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
</UL>

<P><STRONG><a name="[14d]"></a>USB_DeviceClassGetDeviceHandle</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usb_device_class.o(.text.USB_DeviceClassGetDeviceHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceClassGetDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidInit
</UL>

<P><STRONG><a name="[159]"></a>USB_DeviceClassGetSpeed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_device_class.o(.text.USB_DeviceClassGetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceClassGetSpeed &rArr; USB_DeviceClassGetHandleByControllerId &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetHandleByControllerId
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[ba]"></a>USB_DeviceClassInit</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, usb_device_class.o(.text.USB_DeviceClassInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceClassInit &rArr; USB_DeviceInit &rArr; USB_DeviceDeinit &rArr; USB_DeviceFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassFreeHandle
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassAllocateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[b9]"></a>USB_DeviceClockInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, composite.o(.text.USB_DeviceClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceClockInit &rArr; CLOCK_EnableUsbhs0PhyPllClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0PhyPllClock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0DeviceClock
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[92]"></a>USB_DeviceControlCallback</STRONG> (Thumb, 466 bytes, Stack size 56 bytes, usb_device_ch9.o(.text.USB_DeviceControlCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_DeviceControlCallback &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.text.USB_DeviceControlPipeInit)
</UL>
<P><STRONG><a name="[166]"></a>USB_DeviceControlPipeInit</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, usb_device_ch9.o(.text.USB_DeviceControlPipeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceControlPipeInit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>

<P><STRONG><a name="[16a]"></a>USB_DeviceDeinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_device_dci.o(.text.USB_DeviceDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceDeinit &rArr; USB_DeviceFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassInit
</UL>

<P><STRONG><a name="[13c]"></a>USB_DeviceDeinitEndpoint</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usb_device_dci.o(.text.USB_DeviceDeinitEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsDeinit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioControlEndpointsDeinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEndpointsDeinit
</UL>

<P><STRONG><a name="[15b]"></a>USB_DeviceGetConfigurationDescriptor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_device_descriptor.o(.text.USB_DeviceGetConfigurationDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[15a]"></a>USB_DeviceGetDeviceDescriptor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_device_descriptor.o(.text.USB_DeviceGetDeviceDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[15d]"></a>USB_DeviceGetHidReportDescriptor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_device_descriptor.o(.text.USB_DeviceGetHidReportDescriptor))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[161]"></a>USB_DeviceGetStatus</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceGetStatus))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetSpeed
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SynchFrame
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetInterface
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetAddress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetInterface
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetDescriptor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9GetConfiguration
</UL>

<P><STRONG><a name="[15c]"></a>USB_DeviceGetStringDescriptor</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usb_device_descriptor.o(.text.USB_DeviceGetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceGetStringDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[9a]"></a>USB_DeviceHidDeinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usb_device_hid.o(.text.USB_DeviceHidDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceHidDeinit &rArr; USB_DeviceHidEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidFreeHandle
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEndpointsDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[9b]"></a>USB_DeviceHidEvent</STRONG> (Thumb, 796 bytes, Stack size 48 bytes, usb_device_hid.o(.text.USB_DeviceHidEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceHidEvent &rArr; USB_DeviceHidEndpointsInit &rArr; USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidInterruptOut
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidInterruptIn
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEndpointsInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEndpointsDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[99]"></a>USB_DeviceHidInit</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usb_device_hid.o(.text.USB_DeviceHidInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceHidInit &rArr; USB_DeviceClassGetDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetDeviceHandle
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidAllocateHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_class.o(.rodata.s_UsbDeviceClassInterfaceMap)
</UL>
<P><STRONG><a name="[174]"></a>USB_DeviceHidKeyboardAction</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hid_keyboard.o(.text.USB_DeviceHidKeyboardAction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceHidKeyboardAction &rArr; USB_DeviceHidSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidSend
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardSetConfigure
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardCallback
</UL>

<P><STRONG><a name="[0]"></a>USB_DeviceHidKeyboardCallback</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hid_keyboard.o(.text.USB_DeviceHidKeyboardCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceHidKeyboardCallback &rArr; USB_DeviceHidKeyboardAction &rArr; USB_DeviceHidSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardAction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.data.g_CompositeClassConfig)
</UL>
<P><STRONG><a name="[bc]"></a>USB_DeviceHidKeyboardInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hid_keyboard.o(.text.USB_DeviceHidKeyboardInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[160]"></a>USB_DeviceHidKeyboardSetConfigure</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hid_keyboard.o(.text.USB_DeviceHidKeyboardSetConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceHidKeyboardSetConfigure &rArr; USB_DeviceHidKeyboardAction &rArr; USB_DeviceHidSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardAction
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[175]"></a>USB_DeviceHidSend</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_device_hid.o(.text.USB_DeviceHidSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceHidSend &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidKeyboardAction
</UL>

<P><STRONG><a name="[169]"></a>USB_DeviceInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceInit &rArr; USB_DeviceDeinit &rArr; USB_DeviceFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetControllerInterface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceFreeHandle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAllocateHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassInit
</UL>

<P><STRONG><a name="[13e]"></a>USB_DeviceInitEndpoint</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usb_device_dci.o(.text.USB_DeviceInitEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlPipeInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioStreamEndpointsInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioControlEndpointsInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEndpointsInit
</UL>

<P><STRONG><a name="[be]"></a>USB_DeviceIsrEnable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, composite.o(.text.USB_DeviceIsrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceIsrEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[a3]"></a>USB_DeviceLpc3511IpCancel</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceLpc3511IpCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointUnstall
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointStall
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[a4]"></a>USB_DeviceLpc3511IpControl</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USB_DeviceLpc3511IpControl &rArr; USB_DeviceLpc3511IpEndpointUnstall &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpSetDefaultState
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointUnstall
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointStall
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpSetDefaultState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpDeinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[a0]"></a>USB_DeviceLpc3511IpDeinit</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_DeviceLpc3511IpDeinit &rArr; USB_DeviceLpc3511IpControl &rArr; USB_DeviceLpc3511IpEndpointUnstall &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[9f]"></a>USB_DeviceLpc3511IpInit</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DeviceLpc3511IpInit &rArr; USB_DeviceLpc3511IpSetDefaultState &rArr;  USB_DeviceLpc3511IpControl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpSetDefaultState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[a2]"></a>USB_DeviceLpc3511IpRecv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpRecv))
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[a1]"></a>USB_DeviceLpc3511IpSend</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DeviceLpc3511IpSend &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_dci.o(.rodata.s_UsbDeviceLpc3511IpInterface)
</UL>
<P><STRONG><a name="[12f]"></a>USB_DeviceLpcIp3511IsrFunction</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpcIp3511IsrFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USB_DeviceLpcIp3511IsrFunction &rArr; USB_DeviceLpc3511IpInterruptToken &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptReset
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB1_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>USB_DeviceNotificationTrigger</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceNotificationTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>

<P><STRONG><a name="[150]"></a>USB_DeviceRecvRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceRecvRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceRecvRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioRecv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
</UL>

<P><STRONG><a name="[bf]"></a>USB_DeviceRun</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceRun))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPInit
</UL>

<P><STRONG><a name="[151]"></a>USB_DeviceSendRequest</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioSend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidSend
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
</UL>

<P><STRONG><a name="[15e]"></a>USB_DeviceSetSpeed</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, usb_device_descriptor.o(.text.USB_DeviceSetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceSetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCallback
</UL>

<P><STRONG><a name="[162]"></a>USB_DeviceSetStatus</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, usb_device_dci.o(.text.USB_DeviceSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceSetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetConfiguration
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetAddress
</UL>

<P><STRONG><a name="[142]"></a>USB_DeviceStallEndpoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_device_dci.o(.text.USB_DeviceStallEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceStallEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallbackFeedback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
</UL>

<P><STRONG><a name="[143]"></a>USB_DeviceUnstallEndpoint</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_device_dci.o(.text.USB_DeviceUnstallEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceUnstallEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioEvent
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceCh9SetClearFeature
</UL>

<P><STRONG><a name="[18c]"></a>USB_EhciPhyGetBase</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, usb_phy.o(.text.USB_EhciPhyGetBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_EhciPhyGetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyInit
</UL>

<P><STRONG><a name="[16c]"></a>USB_EhciPhyInit</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usb_phy.o(.text.USB_EhciPhyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_EhciPhyInit &rArr; USB_EhciPhyGetBase
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EhciPhyGetBase
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClockInit
</UL>

<P><STRONG><a name="[138]"></a>USB_RecorderDataMatch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, audio_unified.o(.text.USB_RecorderDataMatch))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioCompositeCallback
</UL>

<P><STRONG><a name="[56]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_utick.o(.text.UTICK0_DriverIRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>__aeabi_assert</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitChannelTransferParameter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetupDescriptor
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCallback
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetTransferBytes
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnqueueUserBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelPeriphRq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannelInterrupts
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM8_DriverIRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannel
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Config
</UL>

<P><STRONG><a name="[18e]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[18f]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[4b]"></a>main</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, composite.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bc]"></a>pvPortMalloc</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1a9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[123]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, portasm.o(.text.ulSetInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>

<P><STRONG><a name="[195]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[126]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portasm.o(.text.vClearInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
</UL>

<P><STRONG><a name="[19c]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1a8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[197]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[196]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[122]"></a>vPortEnterCritical</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>

<P><STRONG><a name="[125]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
</UL>

<P><STRONG><a name="[1a4]"></a>vPortFree</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[8d]"></a>vPortSVCHandler_C</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[1c4]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[19a]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[19e]"></a>vQueueAddToRegistry</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1b5]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1bf]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vRestoreContextOfFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[1c5]"></a>vStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c4]"></a>vTaskDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[1c8]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1bb]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1c1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c0]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[193]"></a>vTaskStartScheduler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[ae]"></a>vTaskSwitchContext</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1c3]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xPortStartScheduler &rArr; prvTaskExitError
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[19d]"></a>xQueueGenericCreate</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[1a6]"></a>xQueueGenericReset</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1c6]"></a>xQueueGenericSend</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1ca]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1b0]"></a>xQueueReceive</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1c9]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[192]"></a>xTaskCreate</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>xTaskGenericNotify</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_TimeTick
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[1c7]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1b6]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[12e]"></a>xTaskIncrementTick</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a3]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1ba]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b4]"></a>xTaskResumeAll</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1c2]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ae]"></a>xTimerGenericCommand</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1df]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1e0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[18d]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[190]"></a>USART_WriteByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.USART_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[104]"></a>USART_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_app.o(.text.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>USART_ReadByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_app.o(.text.USART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>USART_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nbiot_app.o(.text.USART_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>USART_ReadByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nbiot_app.o(.text.USART_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>MAILBOX_ClearValueBits</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, core1_app.o(.text.MAILBOX_ClearValueBits))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>MAILBOX_GetValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core1_app.o(.text.MAILBOX_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>DMA_DisableChannelInterrupts</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.DMA_DisableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_DisableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DisableDMAInterrupts
</UL>

<P><STRONG><a name="[f7]"></a>DMA_EnableChannelInterrupts</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.DMA_EnableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnableDMAInterrupts
</UL>

<P><STRONG><a name="[f8]"></a>DMA_EnableChannelPeriphRq</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.DMA_EnableChannelPeriphRq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_EnableChannelPeriphRq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[10d]"></a>I2S_AddTransferDMA</STRONG> (Thumb, 384 bytes, Stack size 88 bytes, fsl_i2s_dma.o(.text.I2S_AddTransferDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetupDescriptor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetTransferBytes
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMACallback
</UL>

<P><STRONG><a name="[11a]"></a>I2S_Disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
</UL>

<P><STRONG><a name="[112]"></a>I2S_DisableDMAInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_DisableDMAInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_DisableDMAInterrupts &rArr; DMA_DisableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DisableChannelInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
</UL>

<P><STRONG><a name="[119]"></a>I2S_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[113]"></a>I2S_EnableDMAInterrupts</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_EnableDMAInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_EnableDMAInterrupts &rArr; DMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
</UL>

<P><STRONG><a name="[114]"></a>I2S_EnqueueUserBuffer</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, fsl_i2s_dma.o(.text.I2S_EnqueueUserBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2S_EnqueueUserBuffer &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
</UL>

<P><STRONG><a name="[10e]"></a>I2S_GetInstance</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferCreateHandleDMA
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_EnqueueUserBuffer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>

<P><STRONG><a name="[10f]"></a>I2S_GetTransferBytes</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_GetTransferBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2S_GetTransferBytes &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_AddTransferDMA
</UL>

<P><STRONG><a name="[118]"></a>I2S_RxEnableDMA</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_RxEnableDMA))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[116]"></a>I2S_StartTransferDMA</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, fsl_i2s_dma.o(.text.I2S_StartTransferDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2S_StartTransferDMA &rArr; DMA_SubmitChannelTransferParameter &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitChannelTransferParameter
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetupDescriptor
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxEnableDMA
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxEnableDMA
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetTransferBytes
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_GetInstance
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelPeriphRq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
</UL>

<P><STRONG><a name="[117]"></a>I2S_TxEnableDMA</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_i2s_dma.o(.text.I2S_TxEnableDMA))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TransferAbortDMA
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_StartTransferDMA
</UL>

<P><STRONG><a name="[c6]"></a>POWER_DisablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clock_config.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[d9]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[dc]"></a>Chip_GetVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pin_mux.o(.text.Chip_GetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[1a1]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1a2]"></a>prvCopyDataToQueue</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a5]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1ab]"></a>prvIsQueueEmpty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1ac]"></a>prvIsQueueFull</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1b9]"></a>prvUnlockQueue</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[194]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[198]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[19f]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a0]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[97]"></a>prvIdleTask</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1a7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[199]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1cb]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[19b]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1b8]"></a>prvGetNextExpireTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1aa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1ad]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[1af]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b2]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[1b1]"></a>prvSampleTimeNow</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1b7]"></a>prvSwitchTimerLists</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[98]"></a>prvTimerTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[1bd]"></a>prvHeapInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1be]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[96]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[e8]"></a>CLOCK_IsPLL0Locked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPLL0Locked))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[e1]"></a>POWER_DisablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableUsbhs0PhyPllClock
</UL>

<P><STRONG><a name="[e6]"></a>POWER_EnablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_clock.o(.text.POWER_EnablePD))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[e7]"></a>findPll0PreDiv</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fsl_clock.o(.text.findPll0PreDiv))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[12d]"></a>DelayLoop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fsl_common.o(.text.DelayLoop))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[ec]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>CTIMER_GetStatusFlags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fsl_ctimer.o(.text.CTIMER_GetStatusFlags))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_dma.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[ef]"></a>DMA_DisableChannel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_DisableChannel &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
</UL>

<P><STRONG><a name="[f0]"></a>DMA_EnableChannel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_EnableChannel &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StartTransfer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_AbortTransfer
</UL>

<P><STRONG><a name="[f5]"></a>DMA_EnableChannelInterrupts</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_EnableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[f2]"></a>DMA_GetInstance</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, fsl_dma.o(.text.DMA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SubmitChannelTransferParameter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>

<P><STRONG><a name="[f3]"></a>DMA_GetVirtualStartChannel</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_GetVirtualStartChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>

<P><STRONG><a name="[f4]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_dma.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[ff]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fsl_dma.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[10a]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[10c]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fsl_flexcomm.o(.text.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[10b]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLEXCOMM_SetPeriph
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[110]"></a>I2S_Config</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, fsl_i2s.o(.text.I2S_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2S_Config &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxInit
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_DisableClock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, composite.o(.text.CLOCK_DisableClock))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, composite.o(.text.CLOCK_EnableClock))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[d0]"></a>DMA_EnableChannel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, composite.o(.text.DMA_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Config
</UL>

<P><STRONG><a name="[d1]"></a>DMA_SetChannelPriority</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, composite.o(.text.DMA_SetChannelPriority))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_DMA_EDMA_Config
</UL>

<P><STRONG><a name="[100]"></a>EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, composite.o(.text.EnableIRQ))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceIsrEnable
</UL>

<P><STRONG><a name="[c1]"></a>POWER_DisablePD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, composite.o(.text.POWER_DisablePD))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[8b]"></a>RxCallback</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, composite.o(.text.RxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RxCallback &rArr; I2S_RxTransferReceiveDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_RxTransferReceiveDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.text.BOARD_DMA_EDMA_Start)
</UL>
<P><STRONG><a name="[8a]"></a>TxCallback</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, composite.o(.text.TxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TxCallback &rArr; I2S_TxTransferSendDMA &rArr; I2S_AddTransferDMA &rArr; DMA_SetupDescriptor &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_TxTransferSendDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> composite.o(.text.BOARD_DMA_EDMA_Start)
</UL>
<P><STRONG><a name="[c0]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, composite.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPTask
</UL>

<P><STRONG><a name="[101]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, composite.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[177]"></a>__NVIC_SetPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, composite.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceIsrEnable
</UL>

<P><STRONG><a name="[173]"></a>USB_DeviceHidAllocateHandle</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, usb_device_hid.o(.text.USB_DeviceHidAllocateHandle))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidInit
</UL>

<P><STRONG><a name="[170]"></a>USB_DeviceHidEndpointsDeinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usb_device_hid.o(.text.USB_DeviceHidEndpointsDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceHidEndpointsDeinit &rArr; USB_DeviceDeinitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidDeinit
</UL>

<P><STRONG><a name="[172]"></a>USB_DeviceHidEndpointsInit</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, usb_device_hid.o(.text.USB_DeviceHidEndpointsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DeviceHidEndpointsInit &rArr; USB_DeviceInitEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
</UL>

<P><STRONG><a name="[171]"></a>USB_DeviceHidFreeHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_device_hid.o(.text.USB_DeviceHidFreeHandle))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidDeinit
</UL>

<P><STRONG><a name="[94]"></a>USB_DeviceHidInterruptIn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_device_hid.o(.text.USB_DeviceHidInterruptIn))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_hid.o(.text.USB_DeviceHidEndpointsInit)
</UL>
<P><STRONG><a name="[93]"></a>USB_DeviceHidInterruptOut</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usb_device_hid.o(.text.USB_DeviceHidInterruptOut))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceHidEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_hid.o(.text.USB_DeviceHidEndpointsInit)
</UL>
<P><STRONG><a name="[133]"></a>USB_DeviceAudioAllocateHandle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usb_device_audio.o(.text.USB_DeviceAudioAllocateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceAudioAllocateHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioInit
</UL>

<P><STRONG><a name="[140]"></a>USB_DeviceAudioFreeHandle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usb_device_audio.o(.text.USB_DeviceAudioFreeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceAudioFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceAudioDeinit
</UL>

<P><STRONG><a name="[164]"></a>USB_DeviceClassAllocateHandle</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usb_device_class.o(.text.USB_DeviceClassAllocateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceClassAllocateHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassInit
</UL>

<P><STRONG><a name="[167]"></a>USB_DeviceClassFreeHandle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usb_device_class.o(.text.USB_DeviceClassFreeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceClassFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassInit
</UL>

<P><STRONG><a name="[168]"></a>USB_DeviceClassGetHandleByControllerId</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, usb_device_class.o(.text.USB_DeviceClassGetHandleByControllerId))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceClassGetHandleByControllerId &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassGetSpeed
</UL>

<P><STRONG><a name="[165]"></a>USB_DeviceClassGetHandleByDeviceHandle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_device_class.o(.text.USB_DeviceClassGetHandleByDeviceHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>

<P><STRONG><a name="[a9]"></a>USB_DeviceCh9GetConfiguration</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9GetConfiguration &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[a8]"></a>USB_DeviceCh9GetDescriptor</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, usb_device_ch9.o(.text.USB_DeviceCh9GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USB_DeviceCh9GetDescriptor &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[ab]"></a>USB_DeviceCh9GetInterface</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9GetInterface &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[a5]"></a>USB_DeviceCh9GetStatus</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, usb_device_ch9.o(.text.USB_DeviceCh9GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceCh9GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[a7]"></a>USB_DeviceCh9SetAddress</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceCh9SetAddress &rArr; USB_DeviceSetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[a6]"></a>USB_DeviceCh9SetClearFeature</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9SetClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9SetClearFeature &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[aa]"></a>USB_DeviceCh9SetConfiguration</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9SetConfiguration &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[ac]"></a>USB_DeviceCh9SetInterface</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USB_DeviceCh9SetInterface &rArr; USB_DeviceClassCallback &rArr; USB_DeviceClassEvent &rArr; USB_DeviceClassGetHandleByDeviceHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassEvent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceClassCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[ad]"></a>USB_DeviceCh9SynchFrame</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usb_device_ch9.o(.text.USB_DeviceCh9SynchFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceCh9SynchFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_device_ch9.o(.rodata.s_UsbDeviceStandardRequest)
</UL>
<P><STRONG><a name="[16d]"></a>USB_DeviceControlCallbackFeedback</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usb_device_ch9.o(.text.USB_DeviceControlCallbackFeedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceControlCallbackFeedback &rArr; USB_DeviceSendRequest &rArr; USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControlCallback
</UL>

<P><STRONG><a name="[132]"></a>USB_DeviceAllocateHandle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_device_dci.o(.text.USB_DeviceAllocateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceAllocateHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[16f]"></a>USB_DeviceControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceControl))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceGetStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceUnstallEndpoint
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceStallEndpoint
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInitEndpoint
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinitEndpoint
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRun
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSetStatus
</UL>

<P><STRONG><a name="[16e]"></a>USB_DeviceFreeHandle</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usb_device_dci.o(.text.USB_DeviceFreeHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_DeviceFreeHandle &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceDeinit
</UL>

<P><STRONG><a name="[176]"></a>USB_DeviceGetControllerInterface</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_device_dci.o(.text.USB_DeviceGetControllerInterface))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceInit
</UL>

<P><STRONG><a name="[189]"></a>USB_DeviceNotification</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, usb_device_dci.o(.text.USB_DeviceNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceResetNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>

<P><STRONG><a name="[18a]"></a>USB_DeviceResetNotification</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usb_device_dci.o(.text.USB_DeviceResetNotification))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceControl
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotification
</UL>

<P><STRONG><a name="[18b]"></a>USB_DeviceTransfer</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, usb_device_dci.o(.text.USB_DeviceTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceTransfer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceSendRequest
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceRecvRequest
</UL>

<P><STRONG><a name="[17f]"></a>USB_DeviceLpc3511IpDoPreviousTransactionMemcpy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpDoPreviousTransactionMemcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_DeviceLpc3511IpDoPreviousTransactionMemcpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
</UL>

<P><STRONG><a name="[17b]"></a>USB_DeviceLpc3511IpEndpointDeinit</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpEndpointDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceLpc3511IpEndpointDeinit &rArr; USB_DeviceLpc3511IpCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511ReleaseMaxPacketBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>

<P><STRONG><a name="[17a]"></a>USB_DeviceLpc3511IpEndpointInit</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpEndpointInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_DeviceLpc3511IpEndpointInit &rArr; USB_DeviceLpcIp3511MallocMaxPacketBuffer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511MallocMaxPacketBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>

<P><STRONG><a name="[183]"></a>USB_DeviceLpc3511IpEndpointPrime</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpEndpointPrime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetActualBufferAndPrime
</UL>

<P><STRONG><a name="[17c]"></a>USB_DeviceLpc3511IpEndpointStall</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpEndpointStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceLpc3511IpEndpointStall &rArr; USB_DeviceLpc3511IpCancel &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>

<P><STRONG><a name="[17d]"></a>USB_DeviceLpc3511IpEndpointUnstall</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpEndpointUnstall))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USB_DeviceLpc3511IpEndpointUnstall &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>

<P><STRONG><a name="[185]"></a>USB_DeviceLpc3511IpGetActualBufferAndPrime</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpGetActualBufferAndPrime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointPrime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
</UL>

<P><STRONG><a name="[178]"></a>USB_DeviceLpc3511IpGetEndpointStateStruct</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpGetEndpointStateStruct))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointUnstall
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointStall
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointDeinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpSend
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>

<P><STRONG><a name="[186]"></a>USB_DeviceLpc3511IpInterruptReset</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpInterruptReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_DeviceLpc3511IpInterruptReset &rArr; USB_DeviceNotificationTrigger &rArr; USB_DeviceNotification &rArr; USB_DeviceResetNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511IsrFunction
</UL>

<P><STRONG><a name="[187]"></a>USB_DeviceLpc3511IpInterruptToken</STRONG> (Thumb, 500 bytes, Stack size 48 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpInterruptToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USB_DeviceLpc3511IpInterruptToken &rArr; USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTransaction
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpTokenUpdate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetEndpointStateStruct
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointPrime
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpDoPreviousTransactionMemcpy
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceNotificationTrigger
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpCancel
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpcIp3511IsrFunction
</UL>

<P><STRONG><a name="[17e]"></a>USB_DeviceLpc3511IpSetDefaultState</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpSetDefaultState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = USB_DeviceLpc3511IpSetDefaultState &rArr;  USB_DeviceLpc3511IpControl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpControl
</UL>

<P><STRONG><a name="[188]"></a>USB_DeviceLpc3511IpTokenUpdate</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpTokenUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DeviceLpc3511IpTokenUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
</UL>

<P><STRONG><a name="[184]"></a>USB_DeviceLpc3511IpTransaction</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpc3511IpTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USB_DeviceLpc3511IpTransaction &rArr; USB_DeviceLpc3511IpGetActualBufferAndPrime &rArr; USB_DeviceLpc3511IpEndpointPrime &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpGetActualBufferAndPrime
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpInterruptToken
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointUnstall
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpSend
</UL>

<P><STRONG><a name="[182]"></a>USB_DeviceLpcIp3511MallocMaxPacketBuffer</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpcIp3511MallocMaxPacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceLpcIp3511MallocMaxPacketBuffer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointInit
</UL>

<P><STRONG><a name="[181]"></a>USB_DeviceLpcIp3511ReleaseMaxPacketBuffer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usb_device_lpcip3511.o(.text.USB_DeviceLpcIp3511ReleaseMaxPacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_DeviceLpcIp3511ReleaseMaxPacketBuffer &rArr; OSA_EnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_ExitCritical
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSA_EnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeviceLpc3511IpEndpointDeinit
</UL>

<P><STRONG><a name="[129]"></a>lowpower_set_dcdc_power_profile</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_dcdc_power_profile))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[191]"></a>lowpower_set_system_voltage</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_system_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
</UL>

<P><STRONG><a name="[12a]"></a>lowpower_set_voltage_for_process</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_voltage_for_process))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_system_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
