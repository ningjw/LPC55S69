<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\core0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\core0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Thu Dec 10 20:26:54 2020
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BLE_WIFI_AppTask &rArr; ParseProtocol &rArr; ParseJson &rArr; GetSampleDataByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[62]">ACMP_DriverIRQHandler</a>
 <LI><a href="#[60]">ADC0_DriverIRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[81]">CASER_DriverIRQHandler</a>
 <LI><a href="#[8]">DebugMon_Handler</a>
 <LI><a href="#[9c]">DefaultISR</a>
 <LI><a href="#[80]">HASHCRYPT_DriverIRQHandler</a>
 <LI><a href="#[69]">MAILBOX_DriverIRQHandler</a>
 <LI><a href="#[53]">MRT0_DriverIRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[70]">OS_EVENT_DriverIRQHandler</a>
 <LI><a href="#[7e]">PLU_DriverIRQHandler</a>
 <LI><a href="#[83]">PQ_DriverIRQHandler</a>
 <LI><a href="#[82]">PUF_DriverIRQHandler</a>
 <LI><a href="#[67]">RTC_DriverIRQHandler</a>
 <LI><a href="#[61]">Reserved39_DriverIRQHandler</a>
 <LI><a href="#[63]">Reserved41_DriverIRQHandler</a>
 <LI><a href="#[64]">Reserved42_DriverIRQHandler</a>
 <LI><a href="#[68]">Reserved46_DriverIRQHandler</a>
 <LI><a href="#[71]">Reserved55_DriverIRQHandler</a>
 <LI><a href="#[72]">Reserved56_DriverIRQHandler</a>
 <LI><a href="#[73]">Reserved57_DriverIRQHandler</a>
 <LI><a href="#[75]">Reserved59_DriverIRQHandler</a>
 <LI><a href="#[76]">Reserved60_DriverIRQHandler</a>
 <LI><a href="#[77]">Reserved61_DriverIRQHandler</a>
 <LI><a href="#[56]">SCT0_DriverIRQHandler</a>
 <LI><a href="#[74]">SDIO_DriverIRQHandler</a>
 <LI><a href="#[7b]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a>
 <LI><a href="#[7f]">SEC_VIO_DriverIRQHandler</a>
 <LI><a href="#[6]">SecureFault_Handler</a>
 <LI><a href="#[66]">USB0_DriverIRQHandler</a>
 <LI><a href="#[65]">USB0_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[79]">USB1_DriverIRQHandler</a>
 <LI><a href="#[7a]">USB1_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[78]">USB1_PHY_DriverIRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[4a]">WDT_BOD_DriverIRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a>
 <LI><a href="#[c]">DMA0_IRQHandler</a>
 <LI><a href="#[d]">GINT0_IRQHandler</a>
 <LI><a href="#[e]">GINT1_IRQHandler</a>
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a>
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a>
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a>
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a>
 <LI><a href="#[13]">UTICK0_IRQHandler</a>
 <LI><a href="#[14]">MRT0_IRQHandler</a>
 <LI><a href="#[15]">CTIMER0_IRQHandler</a>
 <LI><a href="#[16]">CTIMER1_IRQHandler</a>
 <LI><a href="#[17]">SCT0_IRQHandler</a>
 <LI><a href="#[18]">CTIMER3_IRQHandler</a>
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a>
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a>
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a>
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a>
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a>
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a>
 <LI><a href="#[21]">ADC0_IRQHandler</a>
 <LI><a href="#[22]">Reserved39_IRQHandler</a>
 <LI><a href="#[23]">ACMP_IRQHandler</a>
 <LI><a href="#[24]">Reserved41_IRQHandler</a>
 <LI><a href="#[25]">Reserved42_IRQHandler</a>
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a>
 <LI><a href="#[27]">USB0_IRQHandler</a>
 <LI><a href="#[28]">RTC_IRQHandler</a>
 <LI><a href="#[29]">Reserved46_IRQHandler</a>
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a>
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a>
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a>
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a>
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a>
 <LI><a href="#[30]">CTIMER4_IRQHandler</a>
 <LI><a href="#[31]">OS_EVENT_IRQHandler</a>
 <LI><a href="#[32]">Reserved55_IRQHandler</a>
 <LI><a href="#[33]">Reserved56_IRQHandler</a>
 <LI><a href="#[34]">Reserved57_IRQHandler</a>
 <LI><a href="#[35]">SDIO_IRQHandler</a>
 <LI><a href="#[36]">Reserved59_IRQHandler</a>
 <LI><a href="#[37]">Reserved60_IRQHandler</a>
 <LI><a href="#[38]">Reserved61_IRQHandler</a>
 <LI><a href="#[39]">USB1_PHY_IRQHandler</a>
 <LI><a href="#[3a]">USB1_IRQHandler</a>
 <LI><a href="#[3b]">USB1_NEEDCLK_IRQHandler</a>
 <LI><a href="#[3c]">SEC_HYPERVISOR_CALL_IRQHandler</a>
 <LI><a href="#[3d]">SEC_GPIO_INT0_IRQ0_IRQHandler</a>
 <LI><a href="#[3e]">SEC_GPIO_INT0_IRQ1_IRQHandler</a>
 <LI><a href="#[3f]">PLU_IRQHandler</a>
 <LI><a href="#[40]">SEC_VIO_IRQHandler</a>
 <LI><a href="#[41]">HASHCRYPT_IRQHandler</a>
 <LI><a href="#[42]">CASER_IRQHandler</a>
 <LI><a href="#[43]">PUF_IRQHandler</a>
 <LI><a href="#[44]">PQ_IRQHandler</a>
 <LI><a href="#[45]">DMA1_IRQHandler</a>
 <LI><a href="#[46]">FLEXCOMM8_IRQHandler</a>
 <LI><a href="#[f5]">POWER_SetVoltageForFreq</a>
 <LI><a href="#[192]">lowpower_set_dcdc_power_profile</a>
 <LI><a href="#[1f1]">lowpower_set_system_voltage</a>
 <LI><a href="#[193]">lowpower_set_voltage_for_process</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[132]">cJSON_Delete</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[132]">cJSON_Delete</a><BR>
 <LI><a href="#[1fd]">parse_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">parse_value</a><BR>
 <LI><a href="#[1f7]">parse_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">parse_value</a><BR>
 <LI><a href="#[206]">print_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">print_value</a><BR>
 <LI><a href="#[203]">print_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">print_value</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[62]">ACMP_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[23]">ACMP_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[60]">ADC0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[21]">ADC0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[90]">ADC_AppTask</a> from adc_app.o(.text.ADC_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[92]">BAT_AppTask</a> from battery_app.o(.text.BAT_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[91]">BLE_WIFI_AppTask</a> from ble_app.o(.text.BLE_WIFI_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[81]">CASER_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[42]">CASER_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[93]">CORE1_AppTask</a> from core1_app.o(.text.CORE1_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[54]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[15]">CTIMER0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[55]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[16]">CTIMER1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6e]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[57]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[18]">CTIMER3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6f]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[30]">CTIMER4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4b]">DMA0_DriverIRQHandler</a> from fsl_dma.o(.text.DMA0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[84]">DMA1_DriverIRQHandler</a> from fsl_dma.o(.text.DMA1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[45]">DMA1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9c]">DefaultISR</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from fsl_utick.o(.data.s_utickIsr)
 <LI><a href="#[58]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[59]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5a]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1b]">FLEXCOMM2_IRQHandler</a> from nbiot_app.o(.text.FLEXCOMM2_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5b]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1c]">FLEXCOMM3_IRQHandler</a> from ble_app.o(.text.FLEXCOMM3_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5c]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5d]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5e]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5f]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[85]">FLEXCOMM8_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[46]">FLEXCOMM8_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4c]">GINT0_DriverIRQHandler</a> from fsl_gint.o(.text.GINT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[d]">GINT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4d]">GINT1_DriverIRQHandler</a> from fsl_gint.o(.text.GINT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[e]">GINT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[80]">HASHCRYPT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[41]">HASHCRYPT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[8f]">LED_AppTask</a> from led_app.o(.text.LED_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[69]">MAILBOX_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2a]">MAILBOX_IRQHandler</a> from core1_app.o(.text.MAILBOX_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[53]">MRT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[14]">MRT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[70]">OS_EVENT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[31]">OS_EVENT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8a]">PINT1_CallBack</a> from main.o(.text.PINT1_CallBack) referenced 2 times from peripherals.o(.text.PINT_init)
 <LI><a href="#[8b]">PINT2_CallBack</a> from main.o(.text.PINT2_CallBack) referenced 2 times from peripherals.o(.text.PINT_init)
 <LI><a href="#[4e]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4f]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[50]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[51]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6a]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6b]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6c]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6d]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7e]">PLU_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3f]">PLU_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[83]">PQ_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[44]">PQ_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[82]">PUF_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[43]">PUF_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[67]">RTC_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[28]">RTC_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[61]">Reserved39_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[22]">Reserved39_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[63]">Reserved41_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[24]">Reserved41_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[64]">Reserved42_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[68]">Reserved46_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[29]">Reserved46_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[71]">Reserved55_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[32]">Reserved55_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[72]">Reserved56_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[33]">Reserved56_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[73]">Reserved57_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[34]">Reserved57_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[75]">Reserved59_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[36]">Reserved59_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[76]">Reserved60_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[37]">Reserved60_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[77]">Reserved61_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[38]">Reserved61_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[56]">SCT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[17]">SCT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[74]">SDIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[35]">SDIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7c]">SEC_GPIO_INT0_IRQ0_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3d]">SEC_GPIO_INT0_IRQ0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7d]">SEC_GPIO_INT0_IRQ1_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3e]">SEC_GPIO_INT0_IRQ1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7b]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3c]">SEC_HYPERVISOR_CALL_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7f]">SEC_VIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[40]">SEC_VIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[48]">SystemInit</a> from system_lpc55s69_cm33_core0.o(.text.SystemInit) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[66]">USB0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[27]">USB0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[65]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[79]">USB1_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3a]">USB1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7a]">USB1_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3b]">USB1_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[78]">USB1_PHY_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[39]">USB1_PHY_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8d]">UTICK0_Callback</a> from main.o(.text.UTICK0_Callback) referenced 2 times from peripherals.o(.text.UTICK0_init)
 <LI><a href="#[52]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(.text.UTICK0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[13]">UTICK0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8e]">UTICK_HandleIRQ</a> from fsl_utick.o(.text.UTICK_HandleIRQ) referenced 2 times from fsl_utick.o(.text.UTICK_Init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4a]">WDT_BOD_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[87]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[88]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[86]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from sscanf.o(.text)
 <LI><a href="#[98]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[97]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[9a]">free</a> from mallocr2.o(i.__free$realloc$2region) referenced from cjson.o(.data.global_hooks)
 <LI><a href="#[89]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[47]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[99]">malloc</a> from mallocr2.o(i.__malloc$realloc$2region) referenced from cjson.o(.data.global_hooks)
 <LI><a href="#[95]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[94]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[96]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[9b]">realloc</a> from mallocr2.o(i.__realloc$2region) referenced from cjson.o(.data.global_hooks)
 <LI><a href="#[8c]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text.SVC_Handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[9e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[253]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[254]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[255]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[256]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[257]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>ACMP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>CASER_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[9c]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(.data.s_utickIsr)
</UL>
<P><STRONG><a name="[80]"></a>HASHCRYPT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>PLU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>PQ_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>PUF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>Reserved39_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Reserved42_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Reserved55_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>Reserved56_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>Reserved57_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Reserved59_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>Reserved60_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>Reserved61_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>SDIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>SEC_HYPERVISOR_CALL_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>SEC_VIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>USB1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>USB1_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>USB1_PHY_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>Reserved55_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>Reserved57_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>USB1_PHY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>USB1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>USB1_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>SEC_HYPERVISOR_CALL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>SEC_GPIO_INT0_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>SEC_GPIO_INT0_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>PLU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SEC_VIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>HASHCRYPT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>CASER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>PUF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>PQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ee]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
</UL>

<P><STRONG><a name="[258]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[121]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavePara
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_AddAdcData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadPara
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[1db]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcInfo
</UL>

<P><STRONG><a name="[158]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcInfo
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>

<P><STRONG><a name="[1f0]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[1d9]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcData
</UL>

<P><STRONG><a name="[1da]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcInfo
</UL>

<P><STRONG><a name="[16e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[200]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[a6]"></a>sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1fb]"></a>__aeabi_dcmplt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, dcmpeq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[25f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[260]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[261]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[b8]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[c6]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[bf]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[bb]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[a7]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[86]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>

<P><STRONG><a name="[262]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[263]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[aa]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[c1]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[c2]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[264]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[265]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[89]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[bd]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[90]"></a>ADC_AppTask</STRONG> (Thumb, 940 bytes, Stack size 128 bytes, adc_app.o(.text.ADC_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ADC_AppTask &rArr; W25Q128_AddAdcData &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_AddAdcData
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351a_SetPDN
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1271_ReadData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[d4]"></a>ADC_PwmClkStart</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, adc_drv.o(.text.ADC_PwmClkStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = ADC_PwmClkStart &rArr; CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetPwmPeriodValue
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
</UL>

<P><STRONG><a name="[d8]"></a>ADC_PwmClkStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc_drv.o(.text.ADC_PwmClkStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_PwmClkStop &rArr; CTIMER_StopTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStop
</UL>

<P><STRONG><a name="[da]"></a>ADC_SampleStart</STRONG> (Thumb, 732 bytes, Stack size 64 bytes, adc_app.o(.text.ADC_SampleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ADC_SampleStart &rArr; si5351aSetFilterClk1 &rArr; setupPLL &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_spd_caputer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_spd_caputer
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351a_SetPDN
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1271_ReadData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStop
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStart
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
</UL>

<P><STRONG><a name="[df]"></a>ADC_SampleStop</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, adc_app.o(.text.ADC_SampleStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ADC_SampleStop &rArr; SI5351a_SetPDN &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351a_SetPDN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
</UL>

<P><STRONG><a name="[cb]"></a>ADS1271_ReadData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc_drv.o(.text.ADS1271_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ADS1271_ReadData &rArr; SPI_ADCMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ADCMasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[92]"></a>BAT_AppTask</STRONG> (Thumb, 776 bytes, Stack size 24 bytes, battery_app.o(.text.BAT_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = BAT_AppTask &rArr; Flash_SavePara &rArr; memory_write &rArr; FLASH_Program &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAC
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetVoltage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetAC
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavePara
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[91]"></a>BLE_WIFI_AppTask</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, ble_app.o(.text.BLE_WIFI_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = BLE_WIFI_AppTask &rArr; ParseProtocol &rArr; ParseJson &rArr; GetSampleDataByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseProtocol
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavePara
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[f0]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 590 bytes, Stack size 120 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>BOARD_InitPeripherals</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, peripherals.o(.text.BOARD_InitPeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BOARD_InitPeripherals &rArr; FLEXCOMM6_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>BOARD_InitPins</STRONG> (Thumb, 2280 bytes, Stack size 192 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = BOARD_InitPins &rArr; INPUTMUX_AttachSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GetVersion
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>CLOCK_AttachClk</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[10c]"></a>CLOCK_GetClockOutClkFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetClockOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLOCK_GetClockOutClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[10d]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetOsc32KFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[116]"></a>CLOCK_GetFreq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[115]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[111]"></a>CLOCK_GetFro1MFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro1MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[110]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[118]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[117]"></a>CLOCK_GetMclkClkFreq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetMclkClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[113]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetOsc32KFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetOsc32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[119]"></a>CLOCK_GetPLL0InClockRate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPLL0InClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetPLL0InClockRate &rArr; CLOCK_GetOsc32KFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[10e]"></a>CLOCK_GetPll0OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll0OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[112]"></a>CLOCK_GetPll1OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll1OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[f8]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f6]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f7]"></a>CLOCK_SetPLL0Freq</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_SetPLL0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPll0PreDiv
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPLL0Locked
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f4]"></a>CLOCK_SetupExtClocking</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupExtClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetupExtClocking &rArr; POWER_DisablePD
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[f2]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetupFROClocking &rArr; POWER_DisablePD
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[93]"></a>CORE1_AppTask</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, core1_app.o(.text.CORE1_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CORE1_AppTask &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_secondary_core
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[1a0]"></a>CRC16</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, protocol.o(.text.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
</UL>

<P><STRONG><a name="[54]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>CTIMER0_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peripherals.o(.text.CTIMER0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CTIMER0_init &rArr; CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[55]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>CTIMER2_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripherals.o(.text.CTIMER2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CTIMER2_init &rArr; CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[57]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>CTIMER3_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripherals.o(.text.CTIMER3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CTIMER3_init &rArr; CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[6f]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fsl_ctimer.o(.text.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetStatusFlags
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>CTIMER_GetPwmPeriodValue</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, adc_drv.o(.text.CTIMER_GetPwmPeriodValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CTIMER_GetPwmPeriodValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStart
</UL>

<P><STRONG><a name="[125]"></a>CTIMER_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>

<P><STRONG><a name="[d6]"></a>CTIMER_SetupPwmPeriod</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, fsl_ctimer.o(.text.CTIMER_SetupPwmPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>

<P><STRONG><a name="[4b]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DMA0_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>DMA0_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peripherals.o(.text.DMA0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA0_init &rArr; DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[84]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DMA1_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>DMA_CreateHandle</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, fsl_dma.o(.text.DMA_CreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[133]"></a>DMA_IRQHandle</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, fsl_dma.o(.text.DMA_IRQHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>DMA_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DMA_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[143]"></a>EraseAdcDataInFlash</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, protocol.o(.text.EraseAdcDataInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = EraseAdcDataInFlash &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[146]"></a>FLASH_Erase</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fsl_iap.o(.text.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLASH_Erase &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>

<P><STRONG><a name="[147]"></a>FLASH_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_iap.o(.text.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLASH_Init &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[148]"></a>FLASH_Program</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fsl_iap.o(.text.FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLASH_Program &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
</UL>

<P><STRONG><a name="[149]"></a>FLASH_Read</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, memory.o(.text.FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FLASH_Read &rArr; FLASH_ReadSingleWord &rArr; flash_check_range
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadSingleWord
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read
</UL>

<P><STRONG><a name="[14b]"></a>FLASH_ReadSingleWord</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, memory.o(.text.FLASH_ReadSingleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FLASH_ReadSingleWord &rArr; flash_check_range
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_command_sequence
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>

<P><STRONG><a name="[14d]"></a>FLASH_SaveAppData</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, flash_app.o(.text.FLASH_SaveAppData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FLASH_SaveAppData &rArr; memory_write &rArr; FLASH_Program &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
</UL>

<P><STRONG><a name="[1f6]"></a>FLASH_SetReadModes</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memory.o(.text.FLASH_SetReadModes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetReadModes
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read
</UL>

<P><STRONG><a name="[1f5]"></a>FLASH_SetWriteMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, memory.o(.text.FLASH_SetWriteMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_SetWriteMode
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
</UL>

<P><STRONG><a name="[58]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>FLEXCOMM0_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FLEXCOMM0_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[59]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, nbiot_app.o(.text.FLEXCOMM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLEXCOMM2_IRQHandler &rArr; USART_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[154]"></a>FLEXCOMM2_TimeTick</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nbiot_app.o(.text.FLEXCOMM2_TimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FLEXCOMM2_TimeTick &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[100]"></a>FLEXCOMM2_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FLEXCOMM2_init &rArr; USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5b]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, ble_app.o(.text.FLEXCOMM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FLEXCOMM3_IRQHandler &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[ef]"></a>FLEXCOMM3_SendStr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ble_app.o(.text.FLEXCOMM3_SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FLEXCOMM3_SendStr &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
</UL>

<P><STRONG><a name="[15a]"></a>FLEXCOMM3_TimeTick</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, ble_app.o(.text.FLEXCOMM3_TimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FLEXCOMM3_TimeTick &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[101]"></a>FLEXCOMM3_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripherals.o(.text.FLEXCOMM3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FLEXCOMM3_init &rArr; USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5c]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>FLEXCOMM5_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FLEXCOMM5_init &rArr; USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5e]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>FLEXCOMM6_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FLEXCOMM6_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5f]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM8_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[15d]"></a>FLEXCOMM_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fsl_flexcomm.o(.text.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[161]"></a>Flash_ReadPara</STRONG> (Thumb, 378 bytes, Stack size 64 bytes, flash_app.o(.text.Flash_ReadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = Flash_ReadPara &rArr; memory_read &rArr; FLASH_Read &rArr; FLASH_ReadSingleWord &rArr; flash_check_range
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysPara
</UL>

<P><STRONG><a name="[ea]"></a>Flash_SavePara</STRONG> (Thumb, 432 bytes, Stack size 80 bytes, flash_app.o(.text.Flash_SavePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Flash_SavePara &rArr; memory_write &rArr; FLASH_Program &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[4c]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_gint.o(.text.GINT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, fsl_gint.o(.text.GINT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GINT1_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>GPIO_PinInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_OUT
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_IN
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[16b]"></a>GetSampleData</STRONG> (Thumb, 1882 bytes, Stack size 216 bytes, protocol.o(.text.GetSampleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GetSampleData &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[16c]"></a>GetSampleDataByWifi</STRONG> (Thumb, 1818 bytes, Stack size 216 bytes, protocol.o(.text.GetSampleDataByWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GetSampleDataByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[172]"></a>IIC_Ack</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, soft_iic_drv.o(.text.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Ack &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[176]"></a>IIC_NAck</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, soft_iic_drv.o(.text.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[177]"></a>IIC_Read_Byte</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, soft_iic_drv.o(.text.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>

<P><STRONG><a name="[17a]"></a>IIC_Send_Byte</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, soft_iic_drv.o(.text.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Send_Byte &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>

<P><STRONG><a name="[17b]"></a>IIC_Start</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, soft_iic_drv.o(.text.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Start &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>

<P><STRONG><a name="[17c]"></a>IIC_Stop</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, soft_iic_drv.o(.text.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>

<P><STRONG><a name="[17d]"></a>IIC_Wait_Ack</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, soft_iic_drv.o(.text.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>

<P><STRONG><a name="[10a]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = INPUTMUX_AttachSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[8f]"></a>LED_AppTask</STRONG> (Thumb, 780 bytes, Stack size 112 bytes, led_app.o(.text.LED_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LED_AppTask &rArr; TMP101_ReadTemp &rArr; PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[12e]"></a>LED_CheckSelf</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, led_app.o(.text.LED_CheckSelf))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LED_CheckSelf &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[e5]"></a>LTC2942_GetAC</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, battery_drv.o(.text.LTC2942_GetAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LTC2942_GetAC &rArr; LTC2942_ReadReg2 &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[e8]"></a>LTC2942_GetVoltage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, battery_drv.o(.text.LTC2942_GetVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LTC2942_GetVoltage &rArr; LTC2942_ReadReg2 &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg2
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[e6]"></a>LTC2942_SetAC</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, battery_drv.o(.text.LTC2942_SetAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LTC2942_SetAC &rArr; LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
</UL>

<P><STRONG><a name="[e1]"></a>LTC2942_SetADCMode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, battery_drv.o(.text.LTC2942_SetADCMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LTC2942_SetADCMode &rArr; LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[e4]"></a>LTC2942_SetALCCMode</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, battery_drv.o(.text.LTC2942_SetALCCMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LTC2942_SetALCCMode &rArr; LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[e2]"></a>LTC2942_SetAnalog</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, battery_drv.o(.text.LTC2942_SetAnalog))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LTC2942_SetAnalog &rArr; LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[e3]"></a>LTC2942_SetPrescaler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, battery_drv.o(.text.LTC2942_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LTC2942_SetPrescaler &rArr; LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_WriteReg
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
</UL>

<P><STRONG><a name="[2a]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, core1_app.o(.text.MAILBOX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MAILBOX_IRQHandler &rArr; MAILBOX_GetValue &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_GetValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_ClearValueBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[8a]"></a>PINT1_CallBack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(.text.PINT1_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PINT1_CallBack &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peripherals.o(.text.PINT_init)
</UL>
<P><STRONG><a name="[8b]"></a>PINT2_CallBack</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, main.o(.text.PINT2_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PINT2_CallBack &rArr; GPIO_PinRead
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peripherals.o(.text.PINT_init)
</UL>
<P><STRONG><a name="[189]"></a>PINT_EnableCallbackByIndex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fsl_pint.o(.text.PINT_EnableCallbackByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PINT_EnableCallbackByIndex &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
</UL>

<P><STRONG><a name="[18c]"></a>PINT_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, fsl_pint.o(.text.PINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
</UL>

<P><STRONG><a name="[191]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_pint.o(.text.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_pint.o(.text.PINT_PinInterruptClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINT_PinInterruptClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>PINT_PinInterruptConfig</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, fsl_pint.o(.text.PINT_PinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrRiseFlag
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrFallFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
</UL>

<P><STRONG><a name="[103]"></a>PINT_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, peripherals.o(.text.PINT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PINT_init &rArr; PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[4e]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT0_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT1_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT2_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT3_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT4_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT5_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT6_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT7_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetVoltageForFreq))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_dcdc_power_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[194]"></a>PQ_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fsl_powerquad_basic.o(.text.PQ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PQ_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[196]"></a>PT_IIC_Read_Byte</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, iic_tp100_drv.o(.text.PT_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PT_IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_IN
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
</UL>

<P><STRONG><a name="[19a]"></a>PT_IIC_Send_Byte</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, iic_tp100_drv.o(.text.PT_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PT_IIC_Send_Byte &rArr; TMP_SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_OUT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_WriteReg
</UL>

<P><STRONG><a name="[19c]"></a>PT_IIC_Start</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, iic_tp100_drv.o(.text.PT_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PT_IIC_Start &rArr; TMP_SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_OUT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_WriteReg
</UL>

<P><STRONG><a name="[19d]"></a>PT_IIC_Stop</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, iic_tp100_drv.o(.text.PT_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PT_IIC_Stop &rArr; TMP_SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_OUT
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_WriteReg
</UL>

<P><STRONG><a name="[19e]"></a>PT_IIC_Wait_Ack</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, iic_tp100_drv.o(.text.PT_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP_SDA_IN
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_WriteReg
</UL>

<P><STRONG><a name="[19f]"></a>ParseFirmPacket</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, protocol.o(.text.ParseFirmPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ParseFirmPacket &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SaveAppData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseProtocol
</UL>

<P><STRONG><a name="[1a1]"></a>ParseJson</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, protocol.o(.text.ParseJson))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = ParseJson &rArr; GetSampleDataByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSample
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatCapacity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseProtocol
</UL>

<P><STRONG><a name="[ed]"></a>ParseProtocol</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, protocol.o(.text.ParseProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = ParseProtocol &rArr; ParseJson &rArr; GetSampleDataByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1ab]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[12a]"></a>RESET_PeripheralReset</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQ_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_Init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[1ac]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[e7]"></a>RTC_GetDatetime</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_GetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTC_GetDatetime &rArr; RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSecondsTimerCount
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[1b2]"></a>RTC_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_rtc.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[1b4]"></a>RTC_SetDatetime</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_SetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
</UL>

<P><STRONG><a name="[104]"></a>RTC_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, peripherals.o(.text.RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RTC_init &rArr; RTC_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[11e]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_common.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[7c]"></a>SEC_GPIO_INT0_IRQ0_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEC_GPIO_INT0_IRQ0_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SEC_GPIO_INT0_IRQ1_DriverIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEC_GPIO_INT0_IRQ1_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1b7]"></a>SI5351_ReadReg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, si5351_drv.o(.text.SI5351_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SI5351_ReadReg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351a_SetPDN
</UL>

<P><STRONG><a name="[1b8]"></a>SI5351_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, si5351_drv.o(.text.SI5351_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351a_SetPDN
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMultisynth
</UL>

<P><STRONG><a name="[cc]"></a>SI5351a_SetPDN</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, si5351_drv.o(.text.SI5351a_SetPDN))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SI5351a_SetPDN &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[e0]"></a>SPI_ADCMasterTransfer</STRONG> (Thumb, 224 bytes, Stack size 36 bytes, fsl_spi.o(.text.SPI_ADCMasterTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_ADCMasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1271_ReadData
</UL>

<P><STRONG><a name="[1b9]"></a>SPI_FLASH_Write_Enable</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, w25q128_drv.o(.text.SPI_FLASH_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_FLASH_Write_Enable &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>

<P><STRONG><a name="[1c9]"></a>SPI_FlashMasterTransfer</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, fsl_spi.o(.text.SPI_FlashMasterTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_FlashMasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[144]"></a>SPI_Flash_Erase_Sector</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, w25q128_drv.o(.text.SPI_Flash_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SPI_Flash_Erase_Sector &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
</UL>

<P><STRONG><a name="[1bd]"></a>SPI_Flash_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, w25q128_drv.o(.text.SPI_Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPI_Flash_Init &rArr; SPI_Flash_ReadID &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bf]"></a>SPI_Flash_Read</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, w25q128_drv.o(.text.SPI_Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Flash_Read &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_AddAdcData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcInfo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcData
</UL>

<P><STRONG><a name="[1be]"></a>SPI_Flash_ReadID</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, w25q128_drv.o(.text.SPI_Flash_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Flash_ReadID &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
</UL>

<P><STRONG><a name="[1c0]"></a>SPI_Flash_ReadSR</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, w25q128_drv.o(.text.SPI_Flash_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
</UL>

<P><STRONG><a name="[1bc]"></a>SPI_Flash_Wait_Busy</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, w25q128_drv.o(.text.SPI_Flash_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>

<P><STRONG><a name="[1c1]"></a>SPI_Flash_Write</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, w25q128_drv.o(.text.SPI_Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_AddAdcData
</UL>

<P><STRONG><a name="[1c2]"></a>SPI_Flash_Write_NoCheck</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, w25q128_drv.o(.text.SPI_Flash_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
</UL>

<P><STRONG><a name="[1c3]"></a>SPI_Flash_Write_Page</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, w25q128_drv.o(.text.SPI_Flash_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Wait_Busy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_NoCheck
</UL>

<P><STRONG><a name="[1c4]"></a>SPI_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDummyData
</UL>

<P><STRONG><a name="[151]"></a>SPI_MasterInit</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, fsl_spi.o(.text.SPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDummyData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTransferDelay
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
</UL>

<P><STRONG><a name="[1c5]"></a>SPI_MasterSetBaud</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_spi.o(.text.SPI_MasterSetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_MasterSetBaud &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[1bb]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, w25q128_drv.o(.text.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FlashMasterTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>

<P><STRONG><a name="[1c7]"></a>SPI_SetDummyData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_spi.o(.text.SPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_SetDummyData &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SysTick_Handler &rArr; FLEXCOMM3_TimeTick &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_TimeTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_TimeTick
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ce]"></a>TMP101_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iic_tp100_drv.o(.text.TMP101_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TMP101_Init &rArr; TMP101_WriteReg &rArr; PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[dc]"></a>TMP101_ReadTemp</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, iic_tp100_drv.o(.text.TMP101_ReadTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TMP101_ReadTemp &rArr; PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Send_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_Callback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[1cf]"></a>TMP101_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, iic_tp100_drv.o(.text.TMP101_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TMP101_WriteReg &rArr; PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_Init
</UL>

<P><STRONG><a name="[155]"></a>USART_Init</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableContinuousSCLK
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
</UL>

<P><STRONG><a name="[1d0]"></a>USART_SetBaudRate</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, fsl_usart.o(.text.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[159]"></a>USART_WriteBlocking</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, fsl_usart.o(.text.USART_WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART_WriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
</UL>

<P><STRONG><a name="[8d]"></a>UTICK0_Callback</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, main.o(.text.UTICK0_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UTICK0_Callback &rArr; TMP101_ReadTemp &rArr; PT_IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peripherals.o(.text.UTICK0_init)
</UL>
<P><STRONG><a name="[52]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTICK0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>UTICK0_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peripherals.o(.text.UTICK0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UTICK0_init &rArr; UTICK_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[1d6]"></a>UTICK_ClearStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fsl_utick.o(.text.UTICK_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UTICK_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_HandleIRQ
</UL>

<P><STRONG><a name="[8e]"></a>UTICK_HandleIRQ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTICK_HandleIRQ &rArr; UTICK_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(.text.UTICK_Init)
</UL>
<P><STRONG><a name="[1d3]"></a>UTICK_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UTICK_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
</UL>

<P><STRONG><a name="[1d4]"></a>UTICK_SetTick</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fsl_utick.o(.text.UTICK_SetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UTICK_SetTick &rArr; UTICK_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
</UL>

<P><STRONG><a name="[d2]"></a>W25Q128_AddAdcData</STRONG> (Thumb, 756 bytes, Stack size 112 bytes, flash_app.o(.text.W25Q128_AddAdcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = W25Q128_AddAdcData &rArr; SPI_Flash_Write &rArr; SPI_Flash_Write_NoCheck &rArr; SPI_Flash_Write_Page &rArr; SPI_Flash_Wait_Busy &rArr; SPI_Flash_ReadSR &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[16f]"></a>W25Q128_ReadAdcData</STRONG> (Thumb, 374 bytes, Stack size 56 bytes, flash_app.o(.text.W25Q128_ReadAdcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = W25Q128_ReadAdcData &rArr; SPI_Flash_Read &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
</UL>

<P><STRONG><a name="[165]"></a>W25Q128_ReadAdcInfo</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, flash_app.o(.text.W25Q128_ReadAdcInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = W25Q128_ReadAdcInfo &rArr; SPI_Flash_Read &rArr; SPI_ReadWriteByte &rArr; SPI_FlashMasterTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
</UL>

<P><STRONG><a name="[ec]"></a>WIFI_Init</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, ble_app.o(.text.WIFI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = WIFI_Init &rArr; FLEXCOMM3_SendStr &rArr; USART_WriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_assert</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteBlocking
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_SetValue
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_GetValue
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_ClearValueBits
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM8_DriverIRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTransferDelay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>

<P><STRONG><a name="[1dd]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[145]"></a>cJSON_AddBoolToObject</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_AddBoolToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cJSON_AddBoolToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
</UL>

<P><STRONG><a name="[130]"></a>cJSON_AddNumberToObject</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_AddNumberToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cJSON_AddNumberToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSample
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatCapacity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[166]"></a>cJSON_AddStringToObject</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_AddStringToObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cJSON_AddStringToObject &rArr; add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
</UL>

<P><STRONG><a name="[1e3]"></a>cJSON_CreateBool</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_CreateBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateBool &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
</UL>

<P><STRONG><a name="[1e4]"></a>cJSON_CreateNumber</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_CreateNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateNumber &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>

<P><STRONG><a name="[12d]"></a>cJSON_CreateObject</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_CreateObject))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cJSON_CreateObject &rArr; cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSample
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatCapacity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[1e5]"></a>cJSON_CreateString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cjson.o(.text.cJSON_CreateString))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cJSON_CreateString &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
</UL>

<P><STRONG><a name="[132]"></a>cJSON_Delete</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = cJSON_Delete &rArr;  cJSON_Delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSample
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatCapacity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[164]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_GetObjectItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cJSON_GetObjectItem &rArr; get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
</UL>

<P><STRONG><a name="[1a2]"></a>cJSON_Parse</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_Parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = cJSON_Parse &rArr; cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1e8]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, cjson.o(.text.cJSON_ParseWithOpts))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = cJSON_ParseWithOpts &rArr; parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_utf8_bom
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[131]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cjson.o(.text.cJSON_PrintUnformatted))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseAdcDataInFlash
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSample
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTime
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysPara
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSampleParaByWifi
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSamplePara
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBatCapacity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVersion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTime
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataInFlash
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetObjTemp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatCapacity
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[238]"></a>calc_r_div</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, si5351_drv.o(.text.calc_r_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_r_div
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
</UL>

<P><STRONG><a name="[175]"></a>delay_us</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, soft_iic_drv.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Send_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[97]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQ_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitSysPara
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14f]"></a>memory_erase</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, memory.o(.text.memory_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = memory_erase &rArr; FLASH_Erase &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetWriteMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavePara
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SaveAppData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpgrade
</UL>

<P><STRONG><a name="[1f2]"></a>memory_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, memory.o(.text.memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = memory_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>memory_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, memory.o(.text.memory_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = memory_read &rArr; FLASH_Read &rArr; FLASH_ReadSingleWord &rArr; flash_check_range
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetReadModes
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadPara
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SaveAppData
</UL>

<P><STRONG><a name="[150]"></a>memory_write</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, memory.o(.text.memory_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = memory_write &rArr; FLASH_Program &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetWriteMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SavePara
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SaveAppData
</UL>

<P><STRONG><a name="[233]"></a>pvPortMalloc</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[220]"></a>pxPortInitialiseStack</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[236]"></a>setupMultisynth</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, si5351_drv.o(.text.setupMultisynth))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = setupMultisynth &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
</UL>

<P><STRONG><a name="[237]"></a>setupPLL</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, si5351_drv.o(.text.setupPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = setupPLL &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetFilterClk1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;si5351aSetAdcClk0
</UL>

<P><STRONG><a name="[c8]"></a>si5351aSetAdcClk0</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, si5351_drv.o(.text.si5351aSetAdcClk0))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = si5351aSetAdcClk0 &rArr; setupPLL &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMultisynth
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_r_div
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[c9]"></a>si5351aSetFilterClk1</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, si5351_drv.o(.text.si5351aSetFilterClk1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = si5351aSetFilterClk1 &rArr; setupPLL &rArr; SI5351_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMultisynth
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_r_div
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SI5351_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[122]"></a>start_secondary_core</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, core1_app.o(.text.start_secondary_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_secondary_core
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
</UL>

<P><STRONG><a name="[dd]"></a>start_spd_caputer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core1_app.o(.text.start_spd_caputer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = start_spd_caputer &rArr; MAILBOX_SetValue &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
</UL>

<P><STRONG><a name="[de]"></a>stop_spd_caputer</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, core1_app.o(.text.stop_spd_caputer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stop_spd_caputer &rArr; MAILBOX_SetValue &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
</UL>

<P><STRONG><a name="[1cb]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, portasm.o(.text.ulSetInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1ca]"></a>ulTaskNotifyTake</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(.text.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
</UL>

<P><STRONG><a name="[20a]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1cd]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portasm.o(.text.vClearInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[213]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[21f]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[20c]"></a>vListInsert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[20b]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[20e]"></a>vPortEnterCritical</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[210]"></a>vPortExitCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[21b]"></a>vPortFree</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[8c]"></a>vPortSVCHandler_C</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[240]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[211]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[215]"></a>vQueueAddToRegistry</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[22c]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[23a]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vRestoreContextOfFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[241]"></a>vStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[db]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CheckSelf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
</UL>

<P><STRONG><a name="[123]"></a>vTaskDelete</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
</UL>

<P><STRONG><a name="[244]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[232]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[23d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23b]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[1f4]"></a>vTaskStartScheduler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[9d]"></a>vTaskSwitchContext</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[23f]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[214]"></a>xQueueGenericCreate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[21d]"></a>xQueueGenericReset</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[242]"></a>xQueueGenericSend</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[246]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[227]"></a>xQueueReceive</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[245]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1f3]"></a>xTaskCreate</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[d3]"></a>xTaskGenericNotify</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_TimeTick
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStop
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_TimeTick
</UL>

<P><STRONG><a name="[243]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[22d]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1cc]"></a>xTaskIncrementTick</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[cf]"></a>xTaskNotifyWait</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(.text.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[21a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[231]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[22b]"></a>xTaskResumeAll</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[23e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[225]"></a>xTimerGenericCommand</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[247]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[266]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[267]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[268]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[cd]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_TimeTick
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseFirmPacket
</UL>

<P><STRONG><a name="[249]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[269]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[26a]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[26b]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1d8]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_AddAdcData
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[9a]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr2.o(i.__free$realloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleDataByWifi
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSampleData
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSample
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[16a]"></a>__hardfp_round</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, round.o(i.__hardfp_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
</UL>

<P><STRONG><a name="[169]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
</UL>

<P><STRONG><a name="[1fa]"></a>__hardfp_strtod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, strtod.o(i.__hardfp_strtod))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[99]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr2.o(i.__malloc$realloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetManageInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[9b]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr2.o(i.__realloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cjson.o(.data.global_hooks)
</UL>
<P><STRONG><a name="[26c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[26d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[26e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[24c]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[bc]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1dc]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[188]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, main.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT2_CallBack
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT1_CallBack
</UL>

<P><STRONG><a name="[1d2]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, main.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_Callback
</UL>

<P><STRONG><a name="[17e]"></a>InitSysPara</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, main.o(.text.InitSysPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = InitSysPara &rArr; Flash_ReadPara &rArr; memory_read &rArr; FLASH_Read &rArr; FLASH_ReadSingleWord &rArr; flash_check_range
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ReadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, led_app.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CheckSelf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
</UL>

<P><STRONG><a name="[180]"></a>GPIO_PortToggle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, led_app.o(.text.GPIO_PortToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PortToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
</UL>

<P><STRONG><a name="[ca]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, adc_app.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc_app.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[168]"></a>GetEnegryWindowCorrected</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, adc_app.o(.text.GetEnegryWindowCorrected))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetEnegryWindowCorrected
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRMS
</UL>

<P><STRONG><a name="[d1]"></a>GetRMS</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, adc_app.o(.text.GetRMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetRMS &rArr; __hardfp_round &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEnegryWindowCorrected
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_round
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_AppTask
</UL>

<P><STRONG><a name="[e9]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, battery_app.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[eb]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, battery_app.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BAT_AppTask
</UL>

<P><STRONG><a name="[156]"></a>USART_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ble_app.o(.text.USART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>USART_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ble_app.o(.text.USART_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ble_app.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_WIFI_AppTask
</UL>

<P><STRONG><a name="[12c]"></a>CheckSelf</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, protocol.o(.text.CheckSelf))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CheckSelf &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1271_ReadData
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_CheckSelf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, protocol.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSelf
</UL>

<P><STRONG><a name="[162]"></a>GetBatCapacity</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, protocol.o(.text.GetBatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GetBatCapacity &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[163]"></a>GetManageInfo</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, protocol.o(.text.GetManageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GetManageInfo &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcInfo
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[167]"></a>GetObjTemp</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, protocol.o(.text.GetObjTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = GetObjTemp &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMP101_ReadTemp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[16d]"></a>GetSampleDataInFlash</STRONG> (Thumb, 616 bytes, Stack size 80 bytes, protocol.o(.text.GetSampleDataInFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = GetSampleDataInFlash &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25Q128_ReadAdcData
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[170]"></a>GetTime</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, protocol.o(.text.GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = GetTime &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[171]"></a>GetVersion</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, protocol.o(.text.GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = GetVersion &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a9]"></a>SetBatCapacity</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, protocol.o(.text.SetBatCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = SetBatCapacity &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAC
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a5]"></a>SetSamplePara</STRONG> (Thumb, 1720 bytes, Stack size 176 bytes, protocol.o(.text.SetSamplePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = SetSamplePara &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1aa]"></a>SetSampleParaByWifi</STRONG> (Thumb, 1436 bytes, Stack size 120 bytes, protocol.o(.text.SetSampleParaByWifi))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SetSampleParaByWifi &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a4]"></a>SetSysPara</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, protocol.o(.text.SetSysPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SetSysPara &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a3]"></a>SetTime</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, protocol.o(.text.SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SetTime &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a6]"></a>StartSample</STRONG> (Thumb, 532 bytes, Stack size 96 bytes, protocol.o(.text.StartSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = StartSample &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_SendStr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SampleStart
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a7]"></a>StartUpgrade</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, protocol.o(.text.StartUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = StartUpgrade &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_erase
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[1a8]"></a>StopSample</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, protocol.o(.text.StopSample))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = StopSample &rArr; cJSON_PrintUnformatted &rArr; print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseJson
</UL>

<P><STRONG><a name="[152]"></a>USART_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nbiot_app.o(.text.USART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[153]"></a>USART_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, nbiot_app.o(.text.USART_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, core1_app.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_Init
</UL>

<P><STRONG><a name="[184]"></a>MAILBOX_ClearValueBits</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, core1_app.o(.text.MAILBOX_ClearValueBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MAILBOX_ClearValueBits &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>MAILBOX_GetValue</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, core1_app.o(.text.MAILBOX_GetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MAILBOX_GetValue &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAILBOX_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>MAILBOX_Init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, core1_app.o(.text.MAILBOX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MAILBOX_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
</UL>

<P><STRONG><a name="[187]"></a>MAILBOX_SetValue</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, core1_app.o(.text.MAILBOX_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MAILBOX_SetValue &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_spd_caputer
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_spd_caputer
</UL>

<P><STRONG><a name="[120]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, core1_app.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE1_AppTask
</UL>

<P><STRONG><a name="[182]"></a>LTC2942_ReadReg</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, battery_drv.o(.text.LTC2942_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LTC2942_ReadReg &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAC
</UL>

<P><STRONG><a name="[181]"></a>LTC2942_ReadReg2</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, battery_drv.o(.text.LTC2942_ReadReg2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LTC2942_ReadReg2 &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetVoltage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_GetAC
</UL>

<P><STRONG><a name="[183]"></a>LTC2942_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, battery_drv.o(.text.LTC2942_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LTC2942_WriteReg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetPrescaler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAnalog
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetALCCMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetADCMode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LTC2942_SetAC
</UL>

<P><STRONG><a name="[d7]"></a>CTIMER_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, adc_drv.o(.text.CTIMER_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStart
</UL>

<P><STRONG><a name="[d9]"></a>CTIMER_StopTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, adc_drv.o(.text.CTIMER_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PwmClkStop
</UL>

<P><STRONG><a name="[1ba]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, w25q128_drv.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Erase_Sector
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Write_Page
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadSR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_ReadID
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Write_Enable
</UL>

<P><STRONG><a name="[179]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, soft_iic_drv.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[173]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, soft_iic_drv.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[178]"></a>SDA_IN</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, soft_iic_drv.o(.text.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_IN &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[174]"></a>SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, soft_iic_drv.o(.text.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[199]"></a>GPIO_PinRead</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, iic_tp100_drv.o(.text.GPIO_PinRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinRead
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[198]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, iic_tp100_drv.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Send_Byte
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[197]"></a>TMP_SDA_IN</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iic_tp100_drv.o(.text.TMP_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMP_SDA_IN &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Wait_Ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Read_Byte
</UL>

<P><STRONG><a name="[19b]"></a>TMP_SDA_OUT</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, iic_tp100_drv.o(.text.TMP_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMP_SDA_OUT &rArr; GPIO_PinInit
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Stop
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PT_IIC_Send_Byte
</UL>

<P><STRONG><a name="[f1]"></a>POWER_DisablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, clock_config.o(.text.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[134]"></a>DMA_EnableChannel</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, peripherals.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA_EnableChannel &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[13b]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripherals.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
</UL>

<P><STRONG><a name="[1b5]"></a>RTC_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripherals.o(.text.RTC_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[15b]"></a>USART_EnableInterrupts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peripherals.o(.text.USART_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
</UL>

<P><STRONG><a name="[13c]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, peripherals.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[108]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[10b]"></a>Chip_GetVersion</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pin_mux.o(.text.Chip_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[218]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataFromQueue &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[219]"></a>prvCopyDataToQueue</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[21c]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[222]"></a>prvIsQueueEmpty</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[223]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[230]"></a>prvUnlockQueue</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[209]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[20d]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[216]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[217]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[95]"></a>prvIdleTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[21e]"></a>prvInitialiseNewTask</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[20f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[23c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[212]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[22f]"></a>prvGetNextExpireTime</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[221]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[224]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[226]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[229]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[228]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[22e]"></a>prvSwitchTimerLists</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[96]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[234]"></a>prvHeapInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[235]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[94]"></a>prvTaskExitError</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1de]"></a>add_item_to_array</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, cjson.o(.text.add_item_to_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_item_to_array &rArr; suffix_object
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1e0]"></a>add_item_to_object</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, cjson.o(.text.add_item_to_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = add_item_to_object &rArr; cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cast_away_const
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddStringToObject
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddNumberToObject
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddBoolToObject
</UL>

<P><STRONG><a name="[1ea]"></a>buffer_skip_whitespace</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, cjson.o(.text.buffer_skip_whitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1e6]"></a>cJSON_New_Item</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, cjson.o(.text.cJSON_New_Item))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cJSON_New_Item &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1e2]"></a>cJSON_strdup</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cjson.o(.text.cJSON_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cJSON_strdup &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1ed]"></a>case_insensitive_strcmp</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cjson.o(.text.case_insensitive_strcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_item
</UL>

<P><STRONG><a name="[1e1]"></a>cast_away_const</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, cjson.o(.text.cast_away_const))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cast_away_const
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_object
</UL>

<P><STRONG><a name="[1ef]"></a>ensure</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, cjson.o(.text.ensure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
</UL>

<P><STRONG><a name="[1f9]"></a>get_decimal_point</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cjson.o(.text.get_decimal_point))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[1e7]"></a>get_object_item</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cjson.o(.text.get_object_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_object_item &rArr; case_insensitive_strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;case_insensitive_strcmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[1f7]"></a>parse_array</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, cjson.o(.text.parse_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = parse_array &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[239]"></a>parse_hex4</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, cjson.o(.text.parse_hex4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>

<P><STRONG><a name="[1f8]"></a>parse_number</STRONG> (Thumb, 448 bytes, Stack size 136 bytes, cjson.o(.text.parse_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_strtod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[1fd]"></a>parse_object</STRONG> (Thumb, 514 bytes, Stack size 48 bytes, cjson.o(.text.parse_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = parse_object &rArr;  parse_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_skip_whitespace
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[1fe]"></a>parse_string</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, cjson.o(.text.parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = parse_string &rArr; utf16_literal_to_utf8 &rArr; parse_hex4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf16_literal_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[1eb]"></a>parse_value</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, cjson.o(.text.parse_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = parse_value &rArr; parse_number &rArr; __hardfp_strtod &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
</UL>

<P><STRONG><a name="[1ec]"></a>print</STRONG> (Thumb, 314 bytes, Stack size 112 bytes, cjson.o(.text.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = print &rArr; print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[203]"></a>print_array</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, cjson.o(.text.print_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = print_array &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[204]"></a>print_number</STRONG> (Thumb, 344 bytes, Stack size 96 bytes, cjson.o(.text.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpeq
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_decimal_point
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[206]"></a>print_object</STRONG> (Thumb, 624 bytes, Stack size 56 bytes, cjson.o(.text.print_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = print_object &rArr;  print_value (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_offset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[208]"></a>print_string</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cjson.o(.text.print_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = print_string &rArr; print_string_ptr &rArr; ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[207]"></a>print_string_ptr</STRONG> (Thumb, 552 bytes, Stack size 56 bytes, cjson.o(.text.print_string_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = print_string_ptr &rArr; ensure &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[201]"></a>print_value</STRONG> (Thumb, 370 bytes, Stack size 32 bytes, cjson.o(.text.print_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = print_value &rArr; print_number &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1e9]"></a>skip_utf8_bom</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cjson.o(.text.skip_utf8_bom))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = skip_utf8_bom &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>

<P><STRONG><a name="[1df]"></a>suffix_object</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cjson.o(.text.suffix_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = suffix_object
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_item_to_array
</UL>

<P><STRONG><a name="[202]"></a>update_offset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, cjson.o(.text.update_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_offset
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1ff]"></a>utf16_literal_to_utf8</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, cjson.o(.text.utf16_literal_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = utf16_literal_to_utf8 &rArr; parse_hex4
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[11d]"></a>CLOCK_IsPLL0Locked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPLL0Locked))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[11b]"></a>POWER_DisablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_clock.o(.text.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[11a]"></a>POWER_EnablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_clock.o(.text.POWER_EnablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_EnablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[11c]"></a>findPll0PreDiv</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, fsl_clock.o(.text.findPll0PreDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = findPll0PreDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[1b6]"></a>DelayLoop</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_common.o(.text.DelayLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[129]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[127]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[128]"></a>CTIMER_GetInstance</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[126]"></a>CTIMER_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, fsl_ctimer.o(.text.CTIMER_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
</UL>

<P><STRONG><a name="[13d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_ctimer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[13a]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_dma.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[139]"></a>DMA_EnableChannelInterrupts</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_EnableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[136]"></a>DMA_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>

<P><STRONG><a name="[137]"></a>DMA_GetVirtualStartChannel</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_dma.o(.text.DMA_GetVirtualStartChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>

<P><STRONG><a name="[138]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_dma.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[13e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_dma.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[15e]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[160]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, fsl_flexcomm.o(.text.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[15f]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[1c8]"></a>SPI_Enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[1c6]"></a>SPI_SetTransferDelay</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_SetTransferDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_SetTransferDelay &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[1d1]"></a>USART_EnableContinuousSCLK</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_usart.o(.text.USART_EnableContinuousSCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_EnableContinuousSCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1d7]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_utick.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>

<P><STRONG><a name="[13f]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_utick.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
</UL>

<P><STRONG><a name="[1d5]"></a>UTICK_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_utick.o(.text.UTICK_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UTICK_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>

<P><STRONG><a name="[140]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_utick.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[14a]"></a>flash_check_range</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, memory.o(.text.flash_check_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_check_range
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadSingleWord
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read
</UL>

<P><STRONG><a name="[14c]"></a>flash_command_sequence</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, memory.o(.text.flash_command_sequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flash_command_sequence
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadSingleWord
</UL>

<P><STRONG><a name="[1b3]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_rtc.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1ad]"></a>RTC_CheckDatetimeFormat</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_CheckDatetimeFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTC_CheckDatetimeFormat &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[1ae]"></a>RTC_ConvertDatetimeToSeconds</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, fsl_rtc.o(.text.RTC_ConvertDatetimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[1b0]"></a>RTC_ConvertSecondsToDatetime</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, fsl_rtc.o(.text.RTC_ConvertSecondsToDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; fputs &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
</UL>

<P><STRONG><a name="[1b1]"></a>RTC_GetSecondsTimerCount</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fsl_rtc.o(.text.RTC_GetSecondsTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetSecondsTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
</UL>

<P><STRONG><a name="[18d]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_pint.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[141]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_pint.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>

<P><STRONG><a name="[190]"></a>PINT_PinInterruptClrFallFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_pint.o(.text.PINT_PinInterruptClrFallFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PinInterruptClrFallFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[18f]"></a>PINT_PinInterruptClrRiseFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_pint.o(.text.PINT_PinInterruptClrRiseFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PinInterruptClrRiseFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[18b]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_pint.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_EnableCallbackByIndex
</UL>

<P><STRONG><a name="[142]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_pint.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[195]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_powerquad_basic.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PQ_Init
</UL>

<P><STRONG><a name="[192]"></a>lowpower_set_dcdc_power_profile</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_dcdc_power_profile))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[1f1]"></a>lowpower_set_system_voltage</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_system_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
</UL>

<P><STRONG><a name="[193]"></a>lowpower_set_voltage_for_process</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_voltage_for_process))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_system_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[24e]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[248]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[250]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[98]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[24d]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr2.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b9]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[88]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>_local_sscanf</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
