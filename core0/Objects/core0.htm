<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\core0.out]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\core0.out</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Tue Jul 28 10:35:32 2020
<BR><P>
<H3>Maximum Stack Usage =        516 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[62]">ACMP_DriverIRQHandler</a>
 <LI><a href="#[60]">ADC0_DriverIRQHandler</a>
 <LI><a href="#[4]">BusFault_Handler</a>
 <LI><a href="#[81]">CASER_DriverIRQHandler</a>
 <LI><a href="#[8]">DebugMon_Handler</a>
 <LI><a href="#[90]">DefaultISR</a>
 <LI><a href="#[4c]">GINT0_DriverIRQHandler</a>
 <LI><a href="#[4d]">GINT1_DriverIRQHandler</a>
 <LI><a href="#[80]">HASHCRYPT_DriverIRQHandler</a>
 <LI><a href="#[69]">MAILBOX_DriverIRQHandler</a>
 <LI><a href="#[53]">MRT0_DriverIRQHandler</a>
 <LI><a href="#[3]">MemManage_Handler</a>
 <LI><a href="#[70]">OS_EVENT_DriverIRQHandler</a>
 <LI><a href="#[7e]">PLU_DriverIRQHandler</a>
 <LI><a href="#[83]">PQ_DriverIRQHandler</a>
 <LI><a href="#[82]">PUF_DriverIRQHandler</a>
 <LI><a href="#[67]">RTC_DriverIRQHandler</a>
 <LI><a href="#[61]">Reserved39_DriverIRQHandler</a>
 <LI><a href="#[63]">Reserved41_DriverIRQHandler</a>
 <LI><a href="#[64]">Reserved42_DriverIRQHandler</a>
 <LI><a href="#[68]">Reserved46_DriverIRQHandler</a>
 <LI><a href="#[71]">Reserved55_DriverIRQHandler</a>
 <LI><a href="#[72]">Reserved56_DriverIRQHandler</a>
 <LI><a href="#[73]">Reserved57_DriverIRQHandler</a>
 <LI><a href="#[75]">Reserved59_DriverIRQHandler</a>
 <LI><a href="#[76]">Reserved60_DriverIRQHandler</a>
 <LI><a href="#[77]">Reserved61_DriverIRQHandler</a>
 <LI><a href="#[56]">SCT0_DriverIRQHandler</a>
 <LI><a href="#[74]">SDIO_DriverIRQHandler</a>
 <LI><a href="#[7b]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a>
 <LI><a href="#[7f]">SEC_VIO_DriverIRQHandler</a>
 <LI><a href="#[6]">SecureFault_Handler</a>
 <LI><a href="#[66]">USB0_DriverIRQHandler</a>
 <LI><a href="#[65]">USB0_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[79]">USB1_DriverIRQHandler</a>
 <LI><a href="#[7a]">USB1_NEEDCLK_DriverIRQHandler</a>
 <LI><a href="#[78]">USB1_PHY_DriverIRQHandler</a>
 <LI><a href="#[5]">UsageFault_Handler</a>
 <LI><a href="#[4a]">WDT_BOD_DriverIRQHandler</a>
 <LI><a href="#[1]">NMI_Handler</a>
 <LI><a href="#[2]">HardFault_Handler</a>
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a>
 <LI><a href="#[c]">DMA0_IRQHandler</a>
 <LI><a href="#[d]">GINT0_IRQHandler</a>
 <LI><a href="#[e]">GINT1_IRQHandler</a>
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a>
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a>
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a>
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a>
 <LI><a href="#[13]">UTICK0_IRQHandler</a>
 <LI><a href="#[14]">MRT0_IRQHandler</a>
 <LI><a href="#[15]">CTIMER0_IRQHandler</a>
 <LI><a href="#[16]">CTIMER1_IRQHandler</a>
 <LI><a href="#[17]">SCT0_IRQHandler</a>
 <LI><a href="#[18]">CTIMER3_IRQHandler</a>
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a>
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a>
 <LI><a href="#[1b]">FLEXCOMM2_IRQHandler</a>
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a>
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a>
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a>
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a>
 <LI><a href="#[21]">ADC0_IRQHandler</a>
 <LI><a href="#[22]">Reserved39_IRQHandler</a>
 <LI><a href="#[23]">ACMP_IRQHandler</a>
 <LI><a href="#[24]">Reserved41_IRQHandler</a>
 <LI><a href="#[25]">Reserved42_IRQHandler</a>
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a>
 <LI><a href="#[27]">USB0_IRQHandler</a>
 <LI><a href="#[29]">Reserved46_IRQHandler</a>
 <LI><a href="#[2a]">MAILBOX_IRQHandler</a>
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a>
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a>
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a>
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a>
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a>
 <LI><a href="#[30]">CTIMER4_IRQHandler</a>
 <LI><a href="#[31]">OS_EVENT_IRQHandler</a>
 <LI><a href="#[32]">Reserved55_IRQHandler</a>
 <LI><a href="#[33]">Reserved56_IRQHandler</a>
 <LI><a href="#[34]">Reserved57_IRQHandler</a>
 <LI><a href="#[35]">SDIO_IRQHandler</a>
 <LI><a href="#[36]">Reserved59_IRQHandler</a>
 <LI><a href="#[37]">Reserved60_IRQHandler</a>
 <LI><a href="#[38]">Reserved61_IRQHandler</a>
 <LI><a href="#[39]">USB1_PHY_IRQHandler</a>
 <LI><a href="#[3a]">USB1_IRQHandler</a>
 <LI><a href="#[3b]">USB1_NEEDCLK_IRQHandler</a>
 <LI><a href="#[3c]">SEC_HYPERVISOR_CALL_IRQHandler</a>
 <LI><a href="#[3d]">SEC_GPIO_INT0_IRQ0_IRQHandler</a>
 <LI><a href="#[3e]">SEC_GPIO_INT0_IRQ1_IRQHandler</a>
 <LI><a href="#[3f]">PLU_IRQHandler</a>
 <LI><a href="#[40]">SEC_VIO_IRQHandler</a>
 <LI><a href="#[41]">HASHCRYPT_IRQHandler</a>
 <LI><a href="#[42]">CASER_IRQHandler</a>
 <LI><a href="#[43]">PUF_IRQHandler</a>
 <LI><a href="#[44]">PQ_IRQHandler</a>
 <LI><a href="#[45]">DMA1_IRQHandler</a>
 <LI><a href="#[46]">FLEXCOMM8_IRQHandler</a>
 <LI><a href="#[a9]">POWER_SetVoltageForFreq</a>
 <LI><a href="#[12b]">lowpower_set_dcdc_power_profile</a>
 <LI><a href="#[150]">lowpower_set_system_voltage</a>
 <LI><a href="#[12c]">lowpower_set_voltage_for_process</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[62]">ACMP_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[23]">ACMP_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[60]">ADC0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[21]">ADC0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[81]">CASER_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[42]">CASER_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[54]">CTIMER0_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[15]">CTIMER0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8f]">CTIMER1_Callback</a> from adc_app.o(.text.CTIMER1_Callback) referenced from adc_drv.o(.data.CTIMER1_callback)
 <LI><a href="#[55]">CTIMER1_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[16]">CTIMER1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6e]">CTIMER2_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2f]">CTIMER2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[57]">CTIMER3_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[18]">CTIMER3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6f]">CTIMER4_DriverIRQHandler</a> from fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[30]">CTIMER4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4b]">DMA0_DriverIRQHandler</a> from fsl_dma.o(.text.DMA0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[c]">DMA0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[84]">DMA1_DriverIRQHandler</a> from fsl_dma.o(.text.DMA1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[45]">DMA1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[8]">DebugMon_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[90]">DefaultISR</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from fsl_utick.o(.data.s_utickIsr)
 <LI><a href="#[58]">FLEXCOMM0_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[19]">FLEXCOMM0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[59]">FLEXCOMM1_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1a]">FLEXCOMM1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5a]">FLEXCOMM2_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1b]">FLEXCOMM2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5b]">FLEXCOMM3_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1c]">FLEXCOMM3_IRQHandler</a> from ble_app.o(.text.FLEXCOMM3_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5c]">FLEXCOMM4_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1d]">FLEXCOMM4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5d]">FLEXCOMM5_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1e]">FLEXCOMM5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5e]">FLEXCOMM6_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[1f]">FLEXCOMM6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[5f]">FLEXCOMM7_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[20]">FLEXCOMM7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[85]">FLEXCOMM8_DriverIRQHandler</a> from fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[46]">FLEXCOMM8_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4c]">GINT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[d]">GINT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4d]">GINT1_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[e]">GINT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[80]">HASHCRYPT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[41]">HASHCRYPT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[8a]">LED_AppTask</a> from led_app.o(.text.LED_AppTask) referenced 2 times from main.o(.text.main)
 <LI><a href="#[69]">MAILBOX_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2a]">MAILBOX_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[53]">MRT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[14]">MRT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[70]">OS_EVENT_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[31]">OS_EVENT_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[86]">PINT0_CallBack</a> from main.o(.text.PINT0_CallBack) referenced 2 times from peripherals.o(.text.PINT_init)
 <LI><a href="#[4e]">PIN_INT0_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[f]">PIN_INT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4f]">PIN_INT1_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[10]">PIN_INT1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[50]">PIN_INT2_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT2_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[11]">PIN_INT2_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[51]">PIN_INT3_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT3_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[12]">PIN_INT3_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6a]">PIN_INT4_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT4_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2b]">PIN_INT4_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6b]">PIN_INT5_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT5_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2c]">PIN_INT5_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6c]">PIN_INT6_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT6_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2d]">PIN_INT6_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[6d]">PIN_INT7_DriverIRQHandler</a> from fsl_pint.o(.text.PIN_INT7_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[2e]">PIN_INT7_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7e]">PLU_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3f]">PLU_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[83]">PQ_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[44]">PQ_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[82]">PUF_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[43]">PUF_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[9]">PendSV_Handler</a> from portasm.o(.text.PendSV_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[67]">RTC_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[28]">RTC_IRQHandler</a> from adc_app.o(.text.RTC_IRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[61]">Reserved39_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[22]">Reserved39_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[63]">Reserved41_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[24]">Reserved41_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[64]">Reserved42_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[68]">Reserved46_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[29]">Reserved46_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[71]">Reserved55_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[32]">Reserved55_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[72]">Reserved56_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[33]">Reserved56_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[73]">Reserved57_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[34]">Reserved57_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[75]">Reserved59_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[36]">Reserved59_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[76]">Reserved60_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[37]">Reserved60_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[77]">Reserved61_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[38]">Reserved61_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[56]">SCT0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[17]">SCT0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[74]">SDIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[35]">SDIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7c]">SEC_GPIO_INT0_IRQ0_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3d]">SEC_GPIO_INT0_IRQ0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7d]">SEC_GPIO_INT0_IRQ1_DriverIRQHandler</a> from fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3e]">SEC_GPIO_INT0_IRQ1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7b]">SEC_HYPERVISOR_CALL_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3c]">SEC_HYPERVISOR_CALL_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7f]">SEC_VIO_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[40]">SEC_VIO_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7]">SVC_Handler</a> from portasm.o(.text.SVC_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[6]">SecureFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[a]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[48]">SystemInit</a> from system_lpc55s69_cm33_core0.o(.text.SystemInit) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[66]">USB0_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[27]">USB0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[65]">USB0_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[26]">USB0_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[79]">USB1_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3a]">USB1_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[7a]">USB1_NEEDCLK_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[3b]">USB1_NEEDCLK_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[78]">USB1_PHY_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[39]">USB1_PHY_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[88]">UTICK0_Callback</a> from main.o(.text.UTICK0_Callback) referenced 2 times from peripherals.o(.text.UTICK0_init)
 <LI><a href="#[52]">UTICK0_DriverIRQHandler</a> from fsl_utick.o(.text.UTICK0_DriverIRQHandler) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[13]">UTICK0_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[89]">UTICK_HandleIRQ</a> from fsl_utick.o(.text.UTICK_HandleIRQ) referenced 2 times from fsl_utick.o(.text.UTICK_Init)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[4a]">WDT_BOD_DriverIRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[b]">WDT_BOD_IRQHandler</a> from startup_lpc55s69_cm33_core0.o(.text) referenced from startup_lpc55s69_cm33_core0.o(.isr_vector)
 <LI><a href="#[49]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc55s69_cm33_core0.o(.text)
 <LI><a href="#[8e]">fputc</a> from retarget_io.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[47]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8c]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[8b]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[8d]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[87]">vPortSVCHandler_C</a> from port.o(.text.vPortSVCHandler_C) referenced from portasm.o(.text.SVC_Handler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[49]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[198]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[92]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[199]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[19a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[19b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[19c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[19d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[62]"></a>ACMP_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>ADC0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[81]"></a>CASER_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[90]"></a>DefaultISR</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(.data.s_utickIsr)
</UL>
<P><STRONG><a name="[4c]"></a>GINT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>GINT1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>HASHCRYPT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>MAILBOX_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>MRT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[70]"></a>OS_EVENT_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>PLU_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>PQ_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>PUF_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>RTC_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>Reserved39_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>Reserved41_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>Reserved42_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>Reserved46_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>Reserved55_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[72]"></a>Reserved56_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>Reserved57_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>Reserved59_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>Reserved60_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[77]"></a>Reserved61_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>SCT0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>SDIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>SEC_HYPERVISOR_CALL_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>SEC_VIO_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>SecureFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[66]"></a>USB0_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>USB0_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>USB1_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>USB1_NEEDCLK_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>USB1_PHY_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[4a]"></a>WDT_BOD_DriverIRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[b]"></a>WDT_BOD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[c]"></a>DMA0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[d]"></a>GINT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[e]"></a>GINT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[f]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[10]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[11]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[13]"></a>UTICK0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[14]"></a>MRT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[15]"></a>CTIMER0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[16]"></a>CTIMER1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[17]"></a>SCT0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[18]"></a>CTIMER3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[19]"></a>FLEXCOMM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1a]"></a>FLEXCOMM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1b]"></a>FLEXCOMM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1d]"></a>FLEXCOMM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1e]"></a>FLEXCOMM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[1f]"></a>FLEXCOMM6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[20]"></a>FLEXCOMM7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[21]"></a>ADC0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[22]"></a>Reserved39_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[23]"></a>ACMP_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[24]"></a>Reserved41_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[26]"></a>USB0_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[27]"></a>USB0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[29]"></a>Reserved46_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2a]"></a>MAILBOX_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2b]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2c]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2d]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2e]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[2f]"></a>CTIMER2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[30]"></a>CTIMER4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[31]"></a>OS_EVENT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[32]"></a>Reserved55_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[33]"></a>Reserved56_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[34]"></a>Reserved57_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[35]"></a>SDIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[36]"></a>Reserved59_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[37]"></a>Reserved60_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[38]"></a>Reserved61_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[39]"></a>USB1_PHY_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3a]"></a>USB1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3b]"></a>USB1_NEEDCLK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3c]"></a>SEC_HYPERVISOR_CALL_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3d]"></a>SEC_GPIO_INT0_IRQ0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3e]"></a>SEC_GPIO_INT0_IRQ1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[3f]"></a>PLU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[40]"></a>SEC_VIO_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[41]"></a>HASHCRYPT_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[42]"></a>CASER_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[43]"></a>PUF_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[44]"></a>PQ_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[46]"></a>FLEXCOMM8_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, startup_lpc55s69_cm33_core0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[94]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19e]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
</UL>

<P><STRONG><a name="[f9]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1a6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[9c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>BOARD_BootClockRUN</STRONG> (Thumb, 538 bytes, Stack size 112 bytes, clock_config.o(.text.BOARD_BootClockRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetFLASHAccessCyclesForFreq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetClkDiv
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_AttachClk
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>BOARD_InitPeripherals</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, peripherals.o(.text.BOARD_InitPeripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = BOARD_InitPeripherals &rArr; FLEXCOMM6_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>BOARD_InitPins</STRONG> (Thumb, 1886 bytes, Stack size 136 bytes, pin_mux.o(.text.BOARD_InitPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = BOARD_InitPins &rArr; INPUTMUX_AttachSignal
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INPUTMUX_AttachSignal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_GetVersion
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>CLOCK_AttachClk</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, fsl_clock.o(.text.CLOCK_AttachClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_AttachClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[c1]"></a>CLOCK_GetClockOutClkFreq</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetClockOutClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = CLOCK_GetClockOutClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c2]"></a>CLOCK_GetCoreSysClkFreq</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetCoreSysClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetCoreSysClkFreq &rArr; CLOCK_GetOsc32KFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[c4]"></a>CLOCK_GetExtClkFreq</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, fsl_clock.o(.text.CLOCK_GetExtClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[cb]"></a>CLOCK_GetFreq</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, fsl_clock.o(.text.CLOCK_GetFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CLOCK_GetFreq &rArr; CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll1OutFreq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetI2SMClkFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro12MFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
</UL>

<P><STRONG><a name="[ca]"></a>CLOCK_GetFro12MFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro12MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
</UL>

<P><STRONG><a name="[c6]"></a>CLOCK_GetFro1MFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFro1MFreq))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[c5]"></a>CLOCK_GetFroHfFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetFroHfFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[cd]"></a>CLOCK_GetI2SMClkFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetI2SMClkFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[cc]"></a>CLOCK_GetMclkClkFreq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetMclkClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPll0OutFreq
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFroHfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_GetOsc32KFreq</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_GetOsc32KFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_GetOsc32KFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[ce]"></a>CLOCK_GetPLL0InClockRate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_GetPLL0InClockRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetPLL0InClockRate &rArr; CLOCK_GetOsc32KFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetOsc32KFreq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFro1MFreq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetExtClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[c3]"></a>CLOCK_GetPll0OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll0OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[c7]"></a>CLOCK_GetPll1OutFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_GetPll1OutFreq))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetCoreSysClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
</UL>

<P><STRONG><a name="[ac]"></a>CLOCK_SetClkDiv</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetClkDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLOCK_SetClkDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[aa]"></a>CLOCK_SetFLASHAccessCyclesForFreq</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, fsl_clock.o(.text.CLOCK_SetFLASHAccessCyclesForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_SetFLASHAccessCyclesForFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[ab]"></a>CLOCK_SetPLL0Freq</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, fsl_clock.o(.text.CLOCK_SetPLL0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findPll0PreDiv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_EnablePD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_IsPLL0Locked
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetPLL0InClockRate
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a8]"></a>CLOCK_SetupExtClocking</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupExtClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetupExtClocking &rArr; POWER_DisablePD
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[a6]"></a>CLOCK_SetupFROClocking</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, fsl_clock.o(.text.CLOCK_SetupFROClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLOCK_SetupFROClocking &rArr; POWER_DisablePD
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[54]"></a>CTIMER0_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER0_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>CTIMER0_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, peripherals.o(.text.CTIMER0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = CTIMER0_init &rArr; CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[8f]"></a>CTIMER1_Callback</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, adc_app.o(.text.CTIMER1_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CTIMER1_Callback &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetTimerCountValue
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_drv.o(.data.CTIMER1_callback)
</UL>
<P><STRONG><a name="[55]"></a>CTIMER1_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER1_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>CTIMER1_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, adc_drv.o(.text.CTIMER1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = CTIMER1_Init &rArr; CTIMER_SetupCapture &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupCapture
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_RegisterCallBack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>CTIMER1_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripherals.o(.text.CTIMER1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CTIMER1_init &rArr; CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[6e]"></a>CTIMER2_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER2_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>CTIMER2_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, peripherals.o(.text.CTIMER2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = CTIMER2_init &rArr; CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[57]"></a>CTIMER3_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER3_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>CTIMER4_DriverIRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTIMER4_DriverIRQHandler &rArr; CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>CTIMER_GenericIRQHandler</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, fsl_ctimer.o(.text.CTIMER_GenericIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CTIMER_GenericIRQHandler &rArr; CTIMER_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetStatusFlags
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER4_DriverIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER3_DriverIRQHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_DriverIRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_DriverIRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_DriverIRQHandler
</UL>

<P><STRONG><a name="[db]"></a>CTIMER_GetDefaultConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_GetDefaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = CTIMER_GetDefaultConfig &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Init
</UL>

<P><STRONG><a name="[d5]"></a>CTIMER_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CTIMER_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>

<P><STRONG><a name="[dc]"></a>CTIMER_RegisterCallBack</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fsl_ctimer.o(.text.CTIMER_RegisterCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = CTIMER_RegisterCallBack &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Init
</UL>

<P><STRONG><a name="[dd]"></a>CTIMER_SetupCapture</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, fsl_ctimer.o(.text.CTIMER_SetupCapture))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = CTIMER_SetupCapture &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Init
</UL>

<P><STRONG><a name="[d6]"></a>CTIMER_SetupPwmPeriod</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, fsl_ctimer.o(.text.CTIMER_SetupPwmPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CTIMER_SetupPwmPeriod &rArr; CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>

<P><STRONG><a name="[4b]"></a>DMA0_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = DMA0_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>DMA0_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peripherals.o(.text.DMA0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = DMA0_init &rArr; DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[84]"></a>DMA1_DriverIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = DMA1_DriverIRQHandler &rArr; DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>DMA_CreateHandle</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, fsl_dma.o(.text.DMA_CreateHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = DMA_CreateHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[e4]"></a>DMA_IRQHandle</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, fsl_dma.o(.text.DMA_IRQHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = DMA_IRQHandle &rArr; DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_DriverIRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_DriverIRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>DMA_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_dma.o(.text.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = DMA_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[f6]"></a>EventRecordData</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[103]"></a>EventRecorderEnable</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[100]"></a>EventRecorderInitialize</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>EventRecorderStart</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[f3]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[102]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eventrecorder.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[105]"></a>FLASH_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_iap.o(.text.FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLASH_Init &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>FLEXCOMM0_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM0_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>FLEXCOMM0_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = FLEXCOMM0_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[59]"></a>FLEXCOMM1_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM1_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>FLEXCOMM1_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = FLEXCOMM1_init &rArr; I2C_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5a]"></a>FLEXCOMM2_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM2_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>FLEXCOMM2_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FLEXCOMM2_init &rArr; USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5b]"></a>FLEXCOMM3_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM3_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>FLEXCOMM3_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ble_app.o(.text.FLEXCOMM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FLEXCOMM3_IRQHandler &rArr; xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadByte
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatusFlags
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[b5]"></a>FLEXCOMM3_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripherals.o(.text.FLEXCOMM3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = FLEXCOMM3_init &rArr; USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableInterrupts
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5c]"></a>FLEXCOMM4_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM4_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>FLEXCOMM4_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = FLEXCOMM4_init &rArr; I2C_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5d]"></a>FLEXCOMM5_DriverIRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM5_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>FLEXCOMM6_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM6_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>FLEXCOMM6_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text.FLEXCOMM6_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = FLEXCOMM6_init &rArr; SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[5f]"></a>FLEXCOMM7_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM7_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>FLEXCOMM8_DriverIRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM8_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM8_DriverIRQHandler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>FLEXCOMM_GetInstance</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsl_flexcomm.o(.text.FLEXCOMM_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FLEXCOMM_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[10e]"></a>FLEXCOMM_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fsl_flexcomm.o(.text.FLEXCOMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[be]"></a>GPIO_PinInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fsl_gpio.o(.text.GPIO_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[107]"></a>I2C_MasterInit</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_i2c.o(.text.I2C_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = I2C_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSetBaudRate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterEnable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_init
</UL>

<P><STRONG><a name="[116]"></a>I2C_MasterReadBlocking</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, fsl_i2c.o(.text.I2C_MasterReadBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = I2C_MasterReadBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[115]"></a>I2C_MasterSetBaudRate</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, fsl_i2c.o(.text.I2C_MasterSetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_MasterSetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[119]"></a>I2C_MasterStart</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, fsl_i2c.o(.text.I2C_MasterStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterStart &rArr; I2C_PendingStatusWait &rArr; I2C_MasterClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
</UL>

<P><STRONG><a name="[11a]"></a>I2C_MasterStop</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fsl_i2c.o(.text.I2C_MasterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_MasterStop &rArr; I2C_PendingStatusWait &rArr; I2C_MasterClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[11b]"></a>I2C_MasterTransferBlocking</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, fsl_i2c.o(.text.I2C_MasterTransferBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = I2C_MasterTransferBlocking &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadBlocking
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRepeatedStart
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLX_ReadReg
</UL>

<P><STRONG><a name="[11c]"></a>I2C_MasterWriteBlocking</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, fsl_i2c.o(.text.I2C_MasterWriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[bf]"></a>INPUTMUX_AttachSignal</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, fsl_inputmux.o(.text.INPUTMUX_AttachSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = INPUTMUX_AttachSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[8a]"></a>LED_AppTask</STRONG> (Thumb, 780 bytes, Stack size 112 bytes, led_app.o(.text.LED_AppTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = LED_AppTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[122]"></a>MLX_ReadReg</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, iic_temp_drv.o(.text.MLX_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = MLX_ReadReg &rArr; I2C_MasterTransferBlocking &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXL_ReadObjTemp
</UL>

<P><STRONG><a name="[123]"></a>MXL_ReadObjTemp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, iic_temp_drv.o(.text.MXL_ReadObjTemp))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = MXL_ReadObjTemp &rArr; MLX_ReadReg &rArr; I2C_MasterTransferBlocking &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLX_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>PINT0_CallBack</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text.PINT0_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT0_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peripherals.o(.text.PINT_init)
</UL>
<P><STRONG><a name="[124]"></a>PINT_Init</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, fsl_pint.o(.text.PINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
</UL>

<P><STRONG><a name="[129]"></a>PINT_PatternMatchResetDetectLogic</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_pint.o(.text.PINT_PatternMatchResetDetectLogic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>PINT_PinInterruptClrStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fsl_pint.o(.text.PINT_PinInterruptClrStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINT_PinInterruptClrStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ1_DriverIRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEC_GPIO_INT0_IRQ0_DriverIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT7_DriverIRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT6_DriverIRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT5_DriverIRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_DriverIRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_DriverIRQHandler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_DriverIRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_DriverIRQHandler
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_DriverIRQHandler
</UL>

<P><STRONG><a name="[126]"></a>PINT_PinInterruptConfig</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, fsl_pint.o(.text.PINT_PinInterruptConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = PINT_PinInterruptConfig &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrRiseFlag
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrFallFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_init
</UL>

<P><STRONG><a name="[b7]"></a>PINT_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, peripherals.o(.text.PINT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = PINT_init &rArr; PINT_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[4e]"></a>PIN_INT0_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT0_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>PIN_INT1_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT1_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[50]"></a>PIN_INT2_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT2_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT2_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>PIN_INT3_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT3_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT3_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>PIN_INT4_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT4_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT4_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>PIN_INT5_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT5_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT5_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>PIN_INT6_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT6_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT6_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>PIN_INT7_DriverIRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fsl_pint.o(.text.PIN_INT7_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIN_INT7_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>POWER_SetVoltageForFreq</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.POWER_SetVoltageForFreq))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_dcdc_power_profile
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, portasm.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[12d]"></a>RESET_ClearPeripheralReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_ClearPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RESET_ClearPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[e2]"></a>RESET_PeripheralReset</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_PeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[12e]"></a>RESET_SetPeripheralReset</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fsl_reset.o(.text.RESET_SetPeripheralReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
</UL>

<P><STRONG><a name="[133]"></a>RTC_GetDatetime</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_GetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = RTC_GetDatetime &rArr; RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetSecondsTimerCount
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[28]"></a>RTC_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, adc_app.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = RTC_IRQHandler &rArr; MXL_ReadObjTemp &rArr; MLX_ReadReg &rArr; I2C_MasterTransferBlocking &rArr; I2C_MasterWriteBlocking &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXL_ReadObjTemp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[136]"></a>RTC_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_rtc.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = RTC_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[138]"></a>RTC_SetDatetime</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_SetDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[b8]"></a>RTC_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, peripherals.o(.text.RTC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = RTC_init &rArr; RTC_SetDatetime &rArr; RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StopTimer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StartTimer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[d3]"></a>SDK_DelayAtLeastUs</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fsl_common.o(.text.SDK_DelayAtLeastUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayLoop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[7c]"></a>SEC_GPIO_INT0_IRQ0_DriverIRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEC_GPIO_INT0_IRQ0_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[7d]"></a>SEC_GPIO_INT0_IRQ1_DriverIRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fsl_pint.o(.text.SEC_GPIO_INT0_IRQ1_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEC_GPIO_INT0_IRQ1_DriverIRQHandler &rArr; PINT_PinInterruptClrStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptClrStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PatternMatchResetDetectLogic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>SPI_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDummyData
</UL>

<P><STRONG><a name="[106]"></a>SPI_MasterInit</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, fsl_spi.o(.text.SPI_MasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = SPI_MasterInit &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDummyData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTransferDelay
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_init
</UL>

<P><STRONG><a name="[13d]"></a>SPI_MasterSetBaud</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, fsl_spi.o(.text.SPI_MasterSetBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = SPI_MasterSetBaud &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[13f]"></a>SPI_SetDummyData</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_spi.o(.text.SPI_SetDummyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = SPI_SetDummyData &rArr; SPI_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.SVC_Handler))
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
<LI> startup_lpc55s69_cm33_core0.o(.isr_vector)
</UL>
<P><STRONG><a name="[48]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInitHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>SystemInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_lpc55s69_cm33_core0.o(.text.SystemInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[108]"></a>USART_Init</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, fsl_usart.o(.text.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = USART_Init &rArr; FLEXCOMM_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_EnableContinuousSCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_init
</UL>

<P><STRONG><a name="[145]"></a>USART_SetBaudRate</STRONG> (Thumb, 382 bytes, Stack size 56 bytes, fsl_usart.o(.text.USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USART_SetBaudRate &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[88]"></a>UTICK0_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text.UTICK0_Callback))
<BR>[Address Reference Count : 1]<UL><LI> peripherals.o(.text.UTICK0_init)
</UL>
<P><STRONG><a name="[52]"></a>UTICK0_DriverIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK0_DriverIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTICK0_DriverIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc55s69_cm33_core0.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>UTICK0_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, peripherals.o(.text.UTICK0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = UTICK0_init &rArr; UTICK_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
</UL>

<P><STRONG><a name="[14a]"></a>UTICK_ClearStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fsl_utick.o(.text.UTICK_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UTICK_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_HandleIRQ
</UL>

<P><STRONG><a name="[89]"></a>UTICK_HandleIRQ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK_HandleIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTICK_HandleIRQ &rArr; UTICK_ClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_ClearStatusFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fsl_utick.o(.text.UTICK_Init)
</UL>
<P><STRONG><a name="[147]"></a>UTICK_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fsl_utick.o(.text.UTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = UTICK_Init &rArr; RESET_PeripheralReset &rArr; RESET_SetPeripheralReset &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_PeripheralReset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
</UL>

<P><STRONG><a name="[148]"></a>UTICK_SetTick</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, fsl_utick.o(.text.UTICK_SetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = UTICK_SetTick &rArr; UTICK_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK0_init
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_assert</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetDefaultConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GetInstance
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetMclkClkFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockOutClkFreq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannelInterrupts
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadBlocking
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_GetInstance
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM8_DriverIRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM7_DriverIRQHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM6_DriverIRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM5_DriverIRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM4_DriverIRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_DriverIRQHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM2_DriverIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM1_DriverIRQHandler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM0_DriverIRQHandler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_SetPeripheralReset
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_ClearPeripheralReset
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterSetBaud
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetInstance
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetTransferDelay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertSecondsToDatetime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ConvertDatetimeToSeconds
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CheckDatetimeFormat
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudRate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_GetInstance
</UL>

<P><STRONG><a name="[14e]"></a>abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[8e]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, retarget_io.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 516 + Unknown Stack Size
<LI>Call Chain = main &rArr; BOARD_BootClockRUN &rArr; CLOCK_SetPLL0Freq &rArr; SDK_DelayAtLeastUs &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memory_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPeripherals
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOCON_PinMuxSet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortToggle
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[151]"></a>memory_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, memory.o(.text.memory_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = memory_init &rArr; CLOCK_GetFreq &rArr; CLOCK_GetMclkClkFreq &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>pvPortMalloc</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[16e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[141]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, portasm.o(.text.ulSetInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[158]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>

<P><STRONG><a name="[143]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, portasm.o(.text.vClearInterruptMaskFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[161]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[16d]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[15a]"></a>vListInsert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[159]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[15c]"></a>vPortEnterCritical</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[15e]"></a>vPortExitCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[169]"></a>vPortFree</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[87]"></a>vPortSVCHandler_C</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, port.o(.text.vPortSVCHandler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortSVCHandler_C
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRestoreContextOfFirstTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> portasm.o(.text.SVC_Handler)
</UL>
<P><STRONG><a name="[189]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[15f]"></a>vPortYield</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[163]"></a>vQueueAddToRegistry</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[17a]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[184]"></a>vRestoreContextOfFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vRestoreContextOfFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler_C
</UL>

<P><STRONG><a name="[18a]"></a>vStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, portasm.o(.text.vStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[120]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
</UL>

<P><STRONG><a name="[18d]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[180]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[186]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[185]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[155]"></a>vTaskStartScheduler</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[91]"></a>vTaskSwitchContext</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[188]"></a>xPortStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vStartFirstTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[162]"></a>xQueueGenericCreate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[16b]"></a>xQueueGenericReset</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[18b]"></a>xQueueGenericSend</STRONG> (Thumb, 468 bytes, Stack size 64 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[18f]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[175]"></a>xQueueReceive</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[18e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskInternalSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[154]"></a>xTaskCreate</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[10b]"></a>xTaskGenericNotify</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xTaskGenericNotify &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[17b]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[142]"></a>xTaskIncrementTick</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[168]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[17f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[179]"></a>xTaskResumeAll</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[187]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[173]"></a>xTimerGenericCommand</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, timers.o(.text.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[191]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ab]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1ac]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[152]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14d]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[156]"></a>GPIO_PortToggle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, main.o(.text.GPIO_PortToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PortToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>IOCON_PinMuxSet</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, main.o(.text.IOCON_PinMuxSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IOCON_PinMuxSet
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, led_app.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_PortToggle</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, led_app.o(.text.GPIO_PortToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PortToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AppTask
</UL>

<P><STRONG><a name="[d8]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc_app.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Callback
</UL>

<P><STRONG><a name="[d9]"></a>CTIMER_GetTimerCountValue</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, adc_app.o(.text.CTIMER_GetTimerCountValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_GetTimerCountValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER1_Callback
</UL>

<P><STRONG><a name="[135]"></a>GPIO_PinWrite</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, adc_app.o(.text.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>USART_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ble_app.o(.text.USART_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>USART_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ble_app.o(.text.USART_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_IRQHandler
</UL>

<P><STRONG><a name="[a5]"></a>POWER_DisablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, clock_config.o(.text.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_BootClockRUN
</UL>

<P><STRONG><a name="[d7]"></a>CTIMER_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripherals.o(.text.CTIMER_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER2_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER0_init
</UL>

<P><STRONG><a name="[e5]"></a>DMA_EnableChannel</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, peripherals.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DMA_EnableChannel &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA0_init
</UL>

<P><STRONG><a name="[ec]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, peripherals.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[13a]"></a>RTC_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripherals.o(.text.RTC_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_StartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[139]"></a>RTC_StopTimer</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripherals.o(.text.RTC_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_init
</UL>

<P><STRONG><a name="[10c]"></a>USART_EnableInterrupts</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peripherals.o(.text.USART_EnableInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_EnableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM3_init
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, peripherals.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[bd]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pin_mux.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[c0]"></a>Chip_GetVersion</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pin_mux.o(.text.Chip_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Chip_GetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOARD_InitPins
</UL>

<P><STRONG><a name="[166]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataFromQueue &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[167]"></a>prvCopyDataToQueue</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[16a]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[170]"></a>prvIsQueueEmpty</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[171]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[17e]"></a>prvUnlockQueue</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[157]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[15b]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[164]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[165]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[8c]"></a>prvIdleTask</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[16c]"></a>prvInitialiseNewTask</STRONG> (Thumb, 330 bytes, Stack size 64 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[15d]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[190]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[160]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[17d]"></a>prvGetNextExpireTime</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[16f]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[172]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[174]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 390 bytes, Stack size 72 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[177]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[176]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[17c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[8d]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vListInsertEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[182]"></a>prvHeapInit</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[183]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[8b]"></a>prvTaskExitError</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[f7]"></a>EventCheckFilter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventCheckFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[f2]"></a>EventGetTS</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventGetTS &rArr; UpdateTS &rArr; atomic_xch32
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[f8]"></a>EventRecordItem</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockRecord
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockRecord
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[fa]"></a>GetContext</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetContext &rArr; atomic_inc8
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[fb]"></a>GetRecordIndex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.GetRecordIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetRecordIndex &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[f5]"></a>IncrementOverflowTS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementOverflowTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementOverflowTS &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[ff]"></a>IncrementRecordsDumped</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsDumped))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsDumped &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[fe]"></a>IncrementRecordsWritten</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eventrecorder.o(.text.IncrementRecordsWritten))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IncrementRecordsWritten &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[fc]"></a>LockRecord</STRONG> (Thumb, 54 bytes, Stack size 28 bytes, eventrecorder.o(.text.LockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[fd]"></a>UnlockRecord</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, eventrecorder.o(.text.UnlockRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UnlockRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[f4]"></a>UpdateTS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eventrecorder.o(.text.UpdateTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdateTS &rArr; atomic_xch32
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[113]"></a>atomic_inc32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc32
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsWritten
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementRecordsDumped
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncrementOverflowTS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRecordIndex
</UL>

<P><STRONG><a name="[112]"></a>atomic_inc8</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_inc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc8
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetContext
</UL>

<P><STRONG><a name="[14c]"></a>atomic_xch32</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eventrecorder.o(.text.atomic_xch32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_xch32
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateTS
</UL>

<P><STRONG><a name="[101]"></a>crc16_ccitt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, eventrecorder.o(.text.crc16_ccitt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[14f]"></a>stdout_putchar</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, retarget_io.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[d2]"></a>CLOCK_IsPLL0Locked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fsl_clock.o(.text.CLOCK_IsPLL0Locked))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[d0]"></a>POWER_DisablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_clock.o(.text.POWER_DisablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_DisablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupFROClocking
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetupExtClocking
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[cf]"></a>POWER_EnablePD</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_clock.o(.text.POWER_EnablePD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = POWER_EnablePD
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[d1]"></a>findPll0PreDiv</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, fsl_clock.o(.text.findPll0PreDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = findPll0PreDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_SetPLL0Freq
</UL>

<P><STRONG><a name="[13b]"></a>DelayLoop</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, fsl_common.o(.text.DelayLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDK_DelayAtLeastUs
</UL>

<P><STRONG><a name="[e1]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[df]"></a>CTIMER_ClearStatusFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fsl_ctimer.o(.text.CTIMER_ClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CTIMER_ClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupCapture
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>CTIMER_GetInstance</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.CTIMER_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = CTIMER_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupCapture
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_RegisterCallBack
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_Init
</UL>

<P><STRONG><a name="[de]"></a>CTIMER_GetStatusFlags</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, fsl_ctimer.o(.text.CTIMER_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CTIMER_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_GenericIRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_ctimer.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupPwmPeriod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTIMER_SetupCapture
</UL>

<P><STRONG><a name="[ee]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_ctimer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[eb]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_dma.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>

<P><STRONG><a name="[ea]"></a>DMA_EnableChannelInterrupts</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_EnableChannelInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DMA_EnableChannelInterrupts &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[e7]"></a>DMA_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_dma.o(.text.DMA_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetVirtualStartChannel
</UL>

<P><STRONG><a name="[e8]"></a>DMA_GetVirtualStartChannel</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fsl_dma.o(.text.DMA_GetVirtualStartChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = DMA_GetVirtualStartChannel &rArr; DMA_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetInstance
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandle
</UL>

<P><STRONG><a name="[e9]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_dma.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CreateHandle
</UL>

<P><STRONG><a name="[ef]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_dma.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[10f]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_flexcomm.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[111]"></a>FLEXCOMM_PeripheralIsPresent</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, fsl_flexcomm.o(.text.FLEXCOMM_PeripheralIsPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_SetPeriph
</UL>

<P><STRONG><a name="[110]"></a>FLEXCOMM_SetPeriph</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, fsl_flexcomm.o(.text.FLEXCOMM_SetPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FLEXCOMM_SetPeriph &rArr; FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_PeripheralIsPresent
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLEXCOMM_Init
</UL>

<P><STRONG><a name="[11d]"></a>I2C_GetStatusFlags</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fsl_i2c.o(.text.I2C_GetStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>

<P><STRONG><a name="[11e]"></a>I2C_MasterClearStatusFlags</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fsl_i2c.o(.text.I2C_MasterClearStatusFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterClearStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PendingStatusWait
</UL>

<P><STRONG><a name="[114]"></a>I2C_MasterEnable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fsl_i2c.o(.text.I2C_MasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterInit
</UL>

<P><STRONG><a name="[118]"></a>I2C_MasterRepeatedStart</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fsl_i2c.o(.text.I2C_MasterRepeatedStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_MasterRepeatedStart &rArr; I2C_MasterStart &rArr; I2C_PendingStatusWait &rArr; I2C_MasterClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferBlocking
</UL>

<P><STRONG><a name="[117]"></a>I2C_PendingStatusWait</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fsl_i2c.o(.text.I2C_PendingStatusWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_PendingStatusWait &rArr; I2C_MasterClearStatusFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterClearStatusFlags
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatusFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWriteBlocking
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStop
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterStart
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadBlocking
</UL>

<P><STRONG><a name="[125]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_pint.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[128]"></a>PINT_PinInterruptClrFallFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_pint.o(.text.PINT_PinInterruptClrFallFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PinInterruptClrFallFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[127]"></a>PINT_PinInterruptClrRiseFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fsl_pint.o(.text.PINT_PinInterruptClrRiseFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PINT_PinInterruptClrRiseFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_PinInterruptConfig
</UL>

<P><STRONG><a name="[137]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_rtc.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[12f]"></a>RTC_CheckDatetimeFormat</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, fsl_rtc.o(.text.RTC_CheckDatetimeFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = RTC_CheckDatetimeFormat &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[130]"></a>RTC_ConvertDatetimeToSeconds</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, fsl_rtc.o(.text.RTC_ConvertDatetimeToSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = RTC_ConvertDatetimeToSeconds &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDatetime
</UL>

<P><STRONG><a name="[132]"></a>RTC_ConvertSecondsToDatetime</STRONG> (Thumb, 390 bytes, Stack size 56 bytes, fsl_rtc.o(.text.RTC_ConvertSecondsToDatetime))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = RTC_ConvertSecondsToDatetime &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
</UL>

<P><STRONG><a name="[134]"></a>RTC_GetSecondsTimerCount</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, fsl_rtc.o(.text.RTC_GetSecondsTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_GetSecondsTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDatetime
</UL>

<P><STRONG><a name="[140]"></a>SPI_Enable</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[13e]"></a>SPI_SetTransferDelay</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, fsl_spi.o(.text.SPI_SetTransferDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SPI_SetTransferDelay &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_MasterInit
</UL>

<P><STRONG><a name="[146]"></a>USART_EnableContinuousSCLK</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, fsl_usart.o(.text.USART_EnableContinuousSCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_EnableContinuousSCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[14b]"></a>CLOCK_EnableClock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fsl_utick.o(.text.CLOCK_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLOCK_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>

<P><STRONG><a name="[f0]"></a>EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fsl_utick.o(.text.EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
</UL>

<P><STRONG><a name="[149]"></a>UTICK_GetInstance</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fsl_utick.o(.text.UTICK_GetInstance))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UTICK_GetInstance &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; EventRecordData &rArr; EventRecordItem &rArr; UnlockRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_SetTick
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTICK_Init
</UL>

<P><STRONG><a name="[f1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, fsl_utick.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIRQ
</UL>

<P><STRONG><a name="[12b]"></a>lowpower_set_dcdc_power_profile</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_dcdc_power_profile))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[150]"></a>lowpower_set_system_voltage</STRONG> (Thumb, 212 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_system_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_voltage_for_process
</UL>

<P><STRONG><a name="[12c]"></a>lowpower_set_voltage_for_process</STRONG> (Thumb, 152 bytes, Stack size unknown bytes, fsl_power_lib.o(.text.lowpower_set_voltage_for_process))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lowpower_set_system_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_SetVoltageForFreq
</UL>

<P><STRONG><a name="[193]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[196]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[195]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
